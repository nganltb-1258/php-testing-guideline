{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gi\u1edbi thi\u1ec7u \u00b6 T\u00e0i li\u1ec7u n\u00e0y bao g\u1ed3m m\u1ed9t s\u1ed1 l\u00fd thuy\u1ebft c\u01a1 b\u1ea3n v\u1ec1 unit test n\u00f3i chung v\u00e0 c\u00e1ch tri\u1ec3n khai c\u1ee5 th\u1ec3 v\u1edbi framework Laravel v\u00e0 PHPUnit. Th\u1ef1c t\u1ebf th\u00ec c\u00f3 nhi\u1ec1u c\u00e1ch tri\u1ec3n khai unit test, \u0111\u1eb7c bi\u1ec7t l\u00e0 \u0111\u1ed1i v\u1edbi ng\u00f4n ng\u1eef m\u1ec1m d\u1ebbo nh\u01b0 PHP, v\u00e0 c\u0169ng c\u00f3 r\u1ea5t nhi\u1ec1u kh\u00e1i ni\u1ec7m nh\u01b0 unit test , integration test , feature test , system test , acceptance test ,.., hay c\u00e1c \u00fd ki\u1ebfn l\u00e0 b\u1ea1n ph\u1ea3i vi\u1ebft nh\u01b0 th\u1ebf n\u00e0y, th\u1ebf kia m\u1edbi \u0111\u00fang... Tuy nhi\u00ean, v\u1edbi m\u1ee5c \u0111\u00edch l\u00e0 gi\u00fap developer c\u00f3 th\u1ec3 tri\u1ec3n khai unit test m\u1ed9t c\u00e1ch d\u1ec5 d\u00e0ng nh\u1ea5t, t\u00e0i li\u1ec7u n\u00e0y s\u1ebd c\u00f3 nhi\u1ec1u \u00fd ki\u1ebfn mang t\u00ednh quan \u0111i\u1ec3m , c\u00f3 th\u1ec3 n\u00f3 s\u1ebd kh\u00f4ng \u0111\u00fang trong m\u1ecdi tr\u01b0\u1eddng h\u1ee3p, c\u0169ng nh\u01b0 c\u1ed1 g\u1eafng s\u1eed d\u1ee5ng c\u00e1ch \u0111\u01a1n gi\u1ea3n nh\u1ea5t \u0111\u1ec3 tri\u1ec3n khai. V\u1ec1 t\u00ednh hi\u1ec7u qu\u1ea3 th\u00ec ch\u01b0a th\u1ec3 \u0111\u00e1nh gi\u00e1 \u0111\u01b0\u1ee3c ngay, nh\u01b0ng ch\u00fang t\u00f4i s\u1ebd c\u1ed1 g\u1eafng \u0111\u00e1nh gi\u00e1 th\u01b0\u1eddng xuy\u00ean v\u00e0 c\u1ea3i thi\u1ec7n d\u1ea7n. R\u1ea5t mong nh\u1eadn \u0111\u01b0\u1ee3c \u00fd ki\u1ebfn \u0111\u00f3ng g\u00f3p c\u1ee7a c\u00e1c b\u1ea1n b\u1eb1ng c\u00e1ch t\u1ea1o issue ho\u1eb7c pull request \u0111\u1ec3 th\u1ea3o lu\u1eadn, s\u1eeda l\u1ed7i... Quan \u0111i\u1ec3m test \u00b6 TODO","title":"Gi\u1edbi thi\u1ec7u"},{"location":"#gioi-thieu","text":"T\u00e0i li\u1ec7u n\u00e0y bao g\u1ed3m m\u1ed9t s\u1ed1 l\u00fd thuy\u1ebft c\u01a1 b\u1ea3n v\u1ec1 unit test n\u00f3i chung v\u00e0 c\u00e1ch tri\u1ec3n khai c\u1ee5 th\u1ec3 v\u1edbi framework Laravel v\u00e0 PHPUnit. Th\u1ef1c t\u1ebf th\u00ec c\u00f3 nhi\u1ec1u c\u00e1ch tri\u1ec3n khai unit test, \u0111\u1eb7c bi\u1ec7t l\u00e0 \u0111\u1ed1i v\u1edbi ng\u00f4n ng\u1eef m\u1ec1m d\u1ebbo nh\u01b0 PHP, v\u00e0 c\u0169ng c\u00f3 r\u1ea5t nhi\u1ec1u kh\u00e1i ni\u1ec7m nh\u01b0 unit test , integration test , feature test , system test , acceptance test ,.., hay c\u00e1c \u00fd ki\u1ebfn l\u00e0 b\u1ea1n ph\u1ea3i vi\u1ebft nh\u01b0 th\u1ebf n\u00e0y, th\u1ebf kia m\u1edbi \u0111\u00fang... Tuy nhi\u00ean, v\u1edbi m\u1ee5c \u0111\u00edch l\u00e0 gi\u00fap developer c\u00f3 th\u1ec3 tri\u1ec3n khai unit test m\u1ed9t c\u00e1ch d\u1ec5 d\u00e0ng nh\u1ea5t, t\u00e0i li\u1ec7u n\u00e0y s\u1ebd c\u00f3 nhi\u1ec1u \u00fd ki\u1ebfn mang t\u00ednh quan \u0111i\u1ec3m , c\u00f3 th\u1ec3 n\u00f3 s\u1ebd kh\u00f4ng \u0111\u00fang trong m\u1ecdi tr\u01b0\u1eddng h\u1ee3p, c\u0169ng nh\u01b0 c\u1ed1 g\u1eafng s\u1eed d\u1ee5ng c\u00e1ch \u0111\u01a1n gi\u1ea3n nh\u1ea5t \u0111\u1ec3 tri\u1ec3n khai. V\u1ec1 t\u00ednh hi\u1ec7u qu\u1ea3 th\u00ec ch\u01b0a th\u1ec3 \u0111\u00e1nh gi\u00e1 \u0111\u01b0\u1ee3c ngay, nh\u01b0ng ch\u00fang t\u00f4i s\u1ebd c\u1ed1 g\u1eafng \u0111\u00e1nh gi\u00e1 th\u01b0\u1eddng xuy\u00ean v\u00e0 c\u1ea3i thi\u1ec7n d\u1ea7n. R\u1ea5t mong nh\u1eadn \u0111\u01b0\u1ee3c \u00fd ki\u1ebfn \u0111\u00f3ng g\u00f3p c\u1ee7a c\u00e1c b\u1ea1n b\u1eb1ng c\u00e1ch t\u1ea1o issue ho\u1eb7c pull request \u0111\u1ec3 th\u1ea3o lu\u1eadn, s\u1eeda l\u1ed7i...","title":"Gi\u1edbi thi\u1ec7u"},{"location":"#quan-iem-test","text":"TODO","title":"Quan \u0111i\u1ec3m test"},{"location":"01-why/","text":"Vi\u1ebft test \u0111\u1ec3 l\u00e0m g\u00ec? \u00b6 C\u00f3 th\u1ec3 k\u1ec3 ra m\u1ed9t s\u1ed1 l\u1ee3i \u00edch khi vi\u1ebft test nh\u01b0: T\u1ef1 tin h\u01a1n trong vi\u1ec7c t\u00edch h\u1ee3p, b\u1ea3o tr\u00ec, m\u1edf r\u1ed9ng v\u00e0 refactor h\u1ec7 th\u1ed1ng Do \u0111\u00e3 c\u00f3 test case cho nh\u1eefng function, ch\u1ee9c n\u0103ng trong h\u1ec7 th\u1ed1ng, n\u00ean vi\u1ec7c refactor s\u1ebd tr\u1edf n\u00ean t\u1ef1 tin h\u01a1n, n\u1ebfu c\u00f3 \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn c\u00e1c ph\u1ea7n kh\u00e1c th\u00ec ch\u00fang ta s\u1ebd bi\u1ebft \u0111\u01b0\u1ee3c th\u00f4ng qua vi\u1ec7c test case b\u1ecb failed. T\u00edch h\u1ee3p CI/CD t\u1ef1 \u0111\u1ed9ng h\u00f3a qu\u00e1 tr\u00ecnh merge, deploy C\u1ea3i thi\u1ec7n k\u1ef9 n\u0103ng c\u1ee7a Developer Vi\u1ec7c vi\u1ebft test gi\u00fap developer hi\u1ec3u h\u01a1n v\u1ec1 thi\u1ebft k\u1ebf code, t\u1ee9c l\u00e0 khi vi\u1ebft code b\u1ea1n s\u1ebd ph\u1ea3i c\u00e2n nh\u1eafc \u0111\u1ec3 l\u00e0m sao cho \u0111o\u1ea1n code \u0111\u00f3 c\u00f3 th\u1ec3 d\u1ec5 \u0111\u1ecdc, d\u1ec5 hi\u1ec3u v\u00e0 d\u1ec5 test. Cover k\u1ef9 h\u01a1n y\u00eau c\u1ea7u h\u1ec7 th\u1ed1ng v\u00ec ph\u1ea3i vi\u1ebft test case \u0111\u1ea7y \u0111\u1ee7 h\u01a1n v\u00e0 ghi nh\u1edb th\u00f4ng qua vi\u1ec7c vi\u1ebft ra suy ngh\u0129, thay v\u00ec ch\u1ec9 test th\u1ee7 c\u00f4ng b\u1eb1ng vi\u1ec7c suy ngh\u0129 trong \u0111\u1ea7u. Gi\u00fap hi\u1ec3u h\u01a1n v\u1ec1 ki\u1ebfn tr\u00fac framework, v\u00ec khi vi\u1ebft test s\u1ebd c\u1ea7n bi\u1ebft lu\u1ed3ng ho\u1ea1t \u0111\u1ed9ng code, v\u1ec1 c\u00e1ch ho\u1ea1t \u0111\u1ed9ng c\u1ee7a DI v\u00e0 nhi\u1ec1u khi ph\u1ea3i debug \u0111\u1ec3 t\u00ecm ra nguy\u00ean nh\u00e2n test failed. Vi\u1ebft test gi\u1edd \u0111\u00e2y l\u00e0 m\u1ed9t y\u00eau c\u1ea7u b\u1eaft bu\u1ed9c \u0111\u1ed1i v\u1edbi h\u1ea7u h\u1ebft c\u00e1c d\u1ef1 \u00e1n open source, v\u1eady n\u00ean \u0111\u00e2y c\u0169ng l\u00e0 m\u1ed9t k\u1ef9 n\u0103ng quan tr\u1ecdng m\u00e0 developer c\u1ea7n c\u00f3 n\u1ebfu mu\u1ed1n l\u00e0m \u0111\u1eb9p profile c\u1ee7a m\u00ecnh.","title":"Vi\u1ebft test \u0111\u1ec3 l\u00e0m g\u00ec?"},{"location":"01-why/#viet-test-e-lam-gi","text":"C\u00f3 th\u1ec3 k\u1ec3 ra m\u1ed9t s\u1ed1 l\u1ee3i \u00edch khi vi\u1ebft test nh\u01b0: T\u1ef1 tin h\u01a1n trong vi\u1ec7c t\u00edch h\u1ee3p, b\u1ea3o tr\u00ec, m\u1edf r\u1ed9ng v\u00e0 refactor h\u1ec7 th\u1ed1ng Do \u0111\u00e3 c\u00f3 test case cho nh\u1eefng function, ch\u1ee9c n\u0103ng trong h\u1ec7 th\u1ed1ng, n\u00ean vi\u1ec7c refactor s\u1ebd tr\u1edf n\u00ean t\u1ef1 tin h\u01a1n, n\u1ebfu c\u00f3 \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn c\u00e1c ph\u1ea7n kh\u00e1c th\u00ec ch\u00fang ta s\u1ebd bi\u1ebft \u0111\u01b0\u1ee3c th\u00f4ng qua vi\u1ec7c test case b\u1ecb failed. T\u00edch h\u1ee3p CI/CD t\u1ef1 \u0111\u1ed9ng h\u00f3a qu\u00e1 tr\u00ecnh merge, deploy C\u1ea3i thi\u1ec7n k\u1ef9 n\u0103ng c\u1ee7a Developer Vi\u1ec7c vi\u1ebft test gi\u00fap developer hi\u1ec3u h\u01a1n v\u1ec1 thi\u1ebft k\u1ebf code, t\u1ee9c l\u00e0 khi vi\u1ebft code b\u1ea1n s\u1ebd ph\u1ea3i c\u00e2n nh\u1eafc \u0111\u1ec3 l\u00e0m sao cho \u0111o\u1ea1n code \u0111\u00f3 c\u00f3 th\u1ec3 d\u1ec5 \u0111\u1ecdc, d\u1ec5 hi\u1ec3u v\u00e0 d\u1ec5 test. Cover k\u1ef9 h\u01a1n y\u00eau c\u1ea7u h\u1ec7 th\u1ed1ng v\u00ec ph\u1ea3i vi\u1ebft test case \u0111\u1ea7y \u0111\u1ee7 h\u01a1n v\u00e0 ghi nh\u1edb th\u00f4ng qua vi\u1ec7c vi\u1ebft ra suy ngh\u0129, thay v\u00ec ch\u1ec9 test th\u1ee7 c\u00f4ng b\u1eb1ng vi\u1ec7c suy ngh\u0129 trong \u0111\u1ea7u. Gi\u00fap hi\u1ec3u h\u01a1n v\u1ec1 ki\u1ebfn tr\u00fac framework, v\u00ec khi vi\u1ebft test s\u1ebd c\u1ea7n bi\u1ebft lu\u1ed3ng ho\u1ea1t \u0111\u1ed9ng code, v\u1ec1 c\u00e1ch ho\u1ea1t \u0111\u1ed9ng c\u1ee7a DI v\u00e0 nhi\u1ec1u khi ph\u1ea3i debug \u0111\u1ec3 t\u00ecm ra nguy\u00ean nh\u00e2n test failed. Vi\u1ebft test gi\u1edd \u0111\u00e2y l\u00e0 m\u1ed9t y\u00eau c\u1ea7u b\u1eaft bu\u1ed9c \u0111\u1ed1i v\u1edbi h\u1ea7u h\u1ebft c\u00e1c d\u1ef1 \u00e1n open source, v\u1eady n\u00ean \u0111\u00e2y c\u0169ng l\u00e0 m\u1ed9t k\u1ef9 n\u0103ng quan tr\u1ecdng m\u00e0 developer c\u1ea7n c\u00f3 n\u1ebfu mu\u1ed1n l\u00e0m \u0111\u1eb9p profile c\u1ee7a m\u00ecnh.","title":"Vi\u1ebft test \u0111\u1ec3 l\u00e0m g\u00ec?"},{"location":"02-testcase/","text":"C\u01a1 b\u1ea3n v\u1ec1 test case \u00b6 Kh\u00e1i ni\u1ec7m \u00b6 Test Case l\u00e0 m\u1ed9t thu\u1eadt ng\u1eef ph\u1ed5 bi\u1ebfn th\u01b0\u1eddng d\u00f9ng trong c\u00e1c b\u00e0i Test c\u1ee5 th\u1ec3. N\u00f3 th\u01b0\u1eddng l\u00e0 \u0111\u01a1n v\u1ecb nh\u1ecf nh\u1ea5t c\u1ee7a Testing. M\u1ed9t Test Case s\u1ebd bao g\u1ed3m c\u00e1c th\u00f4ng tin nh\u01b0 requirements testing (c\u00e1c inputs, \u0111i\u1ec1u ki\u1ec7n th\u1ef1c thi), test steps, verification steps, prerequisites, outputs, test environment ... Vi\u1ebft test case \u00b6 Tr\u01b0\u1edbc khi t\u1ea1o b\u1ea5t c\u1ee9 Test Cases n\u00e0o, ch\u00fang ta n\u00ean x\u00e1c \u0111\u1ecbnh r\u00f5 gi\u00e1 tr\u1ecb \u0111\u1ea7u v\u00e0o c\u1ee7a t\u1eebng function/method c\u1ea7n \u0111\u01b0\u1ee3c test. C\u00e1c Test Cases ph\u1ea3i \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 c\u00f3 th\u1ec3 cover \u0111\u01b0\u1ee3c h\u1ebft c\u00e1c s\u1ef1 k\u1ebft h\u1ee3p c\u1ee7a c\u00e1c gi\u00e1 tr\u1ecb inputs c\u00f9ng c\u00e1c \u0111i\u1ec1u ki\u1ec7n, bao ph\u1ee7 h\u1ebft c\u00e1c nh\u00e1nh if/else. Nh\u00ecn chung, ch\u00fang ta th\u01b0\u1eddng chia test case ra l\u00e0m 3 lo\u1ea1i d\u1ef1a tr\u00ean d\u1eef li\u1ec7u inputs cho Unit Test. Normal : Inputs thu\u1ed9c v\u00e0o d\u1ea3i d\u1eef li\u1ec7u b\u00ecnh th\u01b0\u1eddng (accepted). M\u1ed9t l\u01b0\u1ee3ng l\u1edbn codes c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c cover b\u1eb1ng c\u00e1ch ch\u1ec9 c\u1ea7n ch\u1ea1y normal test cases. Boundary : Inputs b\u1eb1ng ho\u1eb7c x\u1ea5p x\u1ec9 gi\u00e1 tr\u1ecb maximum hay minimum. Ch\u00fang \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 ph\u00e1t hi\u1ec7n l\u1ed7i t\u1ea1i c\u1eadn, thay v\u00ec t\u00ecm ki\u1ebfm l\u1ed7i t\u1ea1i nh\u1eefng v\u1ecb tr\u00ed \u1edf gi\u1eefa trong d\u1ea3i input. Abnormal : Inputs l\u00e0 kh\u00f4ng h\u1ee3p l\u1ec7 hay kh\u00f4ng \u0111\u01b0\u1ee3c k\u1ef3 v\u1ecdng, d\u00f9ng \u0111\u1ec3 ki\u1ec3m tra kh\u1ea3 n\u0103ng handle l\u1ed7i. V\u00ed d\u1ee5: Gi\u1ea3 s\u1eed nh\u01b0 ch\u00fang ta c\u00f3 m\u1ed9t function \u0111\u1ec3 ki\u1ec3m tra \u0111\u1ecba ch\u1ec9 email nh\u1eadp v\u00e0o t\u1eeb user. \u0110\u1ed9 d\u00e0i t\u1ed1i \u0111a c\u1ee7a email l\u00e0 50 k\u00fd t\u1ef1. function validate ( $email ) { if ( filter_var ( $email , FILTER_VALIDATE_EMAIL ) && strlen ( $email ) <= 50 ) { return true ; } return false ; } Ch\u00fang ta n\u00ean vi\u1ebft c\u00e1c Test Cases nh\u01b0 sau: Normal cases \u00b6 public function test_valid_email_format_and_length () { // Email with length 18 (less than: maximum - 1) $email = 'sample@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); } Boundary cases \u00b6 public function test_valid_email_format_and_length_max_minus () { // Email with length 49 (maximum - 1) $email = 'samplesamplesamplesamplesamplesamples@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); } public function test_valid_email_format_and_length_max () { // Email with length 50 (equal maximum) $email = 'samplesamplesamplesamplesamplesamplesa@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); } public function test_valid_email_format_and_length_max_plus () { // Email with length 51 (maximum + 1) $email = 'samplesamplesamplesamplesamplesamplesam@framgia.com' ; $this -> assertEquals ( false , validate ( $email )); } Abnormal cases \u00b6 public function test_invalid_email_format () { // Invalid email format with normal length (between 0 ~ 50) $email = 'framgia.com' ; $this -> assertEquals ( false , validate ( $email )); } public function test_valid_email_format_and_length_exceeded () { // Email with length 54 $email = 'samplesamplesamplesamplesamplesamplesample@framgia.com' ; $this -> assertEquals ( false , validate ( $email )); }","title":"C\u01a1 b\u1ea3n v\u1ec1 test case"},{"location":"02-testcase/#co-ban-ve-test-case","text":"","title":"C\u01a1 b\u1ea3n v\u1ec1 test case"},{"location":"02-testcase/#khai-niem","text":"Test Case l\u00e0 m\u1ed9t thu\u1eadt ng\u1eef ph\u1ed5 bi\u1ebfn th\u01b0\u1eddng d\u00f9ng trong c\u00e1c b\u00e0i Test c\u1ee5 th\u1ec3. N\u00f3 th\u01b0\u1eddng l\u00e0 \u0111\u01a1n v\u1ecb nh\u1ecf nh\u1ea5t c\u1ee7a Testing. M\u1ed9t Test Case s\u1ebd bao g\u1ed3m c\u00e1c th\u00f4ng tin nh\u01b0 requirements testing (c\u00e1c inputs, \u0111i\u1ec1u ki\u1ec7n th\u1ef1c thi), test steps, verification steps, prerequisites, outputs, test environment ...","title":"Kh\u00e1i ni\u1ec7m"},{"location":"02-testcase/#viet-test-case","text":"Tr\u01b0\u1edbc khi t\u1ea1o b\u1ea5t c\u1ee9 Test Cases n\u00e0o, ch\u00fang ta n\u00ean x\u00e1c \u0111\u1ecbnh r\u00f5 gi\u00e1 tr\u1ecb \u0111\u1ea7u v\u00e0o c\u1ee7a t\u1eebng function/method c\u1ea7n \u0111\u01b0\u1ee3c test. C\u00e1c Test Cases ph\u1ea3i \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 c\u00f3 th\u1ec3 cover \u0111\u01b0\u1ee3c h\u1ebft c\u00e1c s\u1ef1 k\u1ebft h\u1ee3p c\u1ee7a c\u00e1c gi\u00e1 tr\u1ecb inputs c\u00f9ng c\u00e1c \u0111i\u1ec1u ki\u1ec7n, bao ph\u1ee7 h\u1ebft c\u00e1c nh\u00e1nh if/else. Nh\u00ecn chung, ch\u00fang ta th\u01b0\u1eddng chia test case ra l\u00e0m 3 lo\u1ea1i d\u1ef1a tr\u00ean d\u1eef li\u1ec7u inputs cho Unit Test. Normal : Inputs thu\u1ed9c v\u00e0o d\u1ea3i d\u1eef li\u1ec7u b\u00ecnh th\u01b0\u1eddng (accepted). M\u1ed9t l\u01b0\u1ee3ng l\u1edbn codes c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c cover b\u1eb1ng c\u00e1ch ch\u1ec9 c\u1ea7n ch\u1ea1y normal test cases. Boundary : Inputs b\u1eb1ng ho\u1eb7c x\u1ea5p x\u1ec9 gi\u00e1 tr\u1ecb maximum hay minimum. Ch\u00fang \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 ph\u00e1t hi\u1ec7n l\u1ed7i t\u1ea1i c\u1eadn, thay v\u00ec t\u00ecm ki\u1ebfm l\u1ed7i t\u1ea1i nh\u1eefng v\u1ecb tr\u00ed \u1edf gi\u1eefa trong d\u1ea3i input. Abnormal : Inputs l\u00e0 kh\u00f4ng h\u1ee3p l\u1ec7 hay kh\u00f4ng \u0111\u01b0\u1ee3c k\u1ef3 v\u1ecdng, d\u00f9ng \u0111\u1ec3 ki\u1ec3m tra kh\u1ea3 n\u0103ng handle l\u1ed7i. V\u00ed d\u1ee5: Gi\u1ea3 s\u1eed nh\u01b0 ch\u00fang ta c\u00f3 m\u1ed9t function \u0111\u1ec3 ki\u1ec3m tra \u0111\u1ecba ch\u1ec9 email nh\u1eadp v\u00e0o t\u1eeb user. \u0110\u1ed9 d\u00e0i t\u1ed1i \u0111a c\u1ee7a email l\u00e0 50 k\u00fd t\u1ef1. function validate ( $email ) { if ( filter_var ( $email , FILTER_VALIDATE_EMAIL ) && strlen ( $email ) <= 50 ) { return true ; } return false ; } Ch\u00fang ta n\u00ean vi\u1ebft c\u00e1c Test Cases nh\u01b0 sau:","title":"Vi\u1ebft test case"},{"location":"02-testcase/#normal-cases","text":"public function test_valid_email_format_and_length () { // Email with length 18 (less than: maximum - 1) $email = 'sample@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); }","title":"Normal cases"},{"location":"02-testcase/#boundary-cases","text":"public function test_valid_email_format_and_length_max_minus () { // Email with length 49 (maximum - 1) $email = 'samplesamplesamplesamplesamplesamples@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); } public function test_valid_email_format_and_length_max () { // Email with length 50 (equal maximum) $email = 'samplesamplesamplesamplesamplesamplesa@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); } public function test_valid_email_format_and_length_max_plus () { // Email with length 51 (maximum + 1) $email = 'samplesamplesamplesamplesamplesamplesam@framgia.com' ; $this -> assertEquals ( false , validate ( $email )); }","title":"Boundary cases"},{"location":"02-testcase/#abnormal-cases","text":"public function test_invalid_email_format () { // Invalid email format with normal length (between 0 ~ 50) $email = 'framgia.com' ; $this -> assertEquals ( false , validate ( $email )); } public function test_valid_email_format_and_length_exceeded () { // Email with length 54 $email = 'samplesamplesamplesamplesamplesamplesample@framgia.com' ; $this -> assertEquals ( false , validate ( $email )); }","title":"Abnormal cases"},{"location":"03-phpunit/","text":"PHPUnit \u00b6 C\u00e0i \u0111\u1eb7t \u00b6 C\u00e0i \u0111\u1eb7t theo t\u1eebng project: composer require --dev phpunit/phpunit Khi \u0111\u00f3 ta c\u00f3 tool: ./vendor/bin/phpunit C\u1ea5u h\u00ecnh \u00b6 File c\u1ea5u h\u00ecnh phpunit.xml (th\u01b0\u1eddng \u0111\u00e3 c\u00f3 s\u1eb5n trong project Laravel): <?xml version=\"1.0\" encoding=\"UTF-8\"?> <phpunit bootstrap= \"vendor/autoload.php\" colors= \"true\" convertErrorsToExceptions= \"true\" convertNoticesToExceptions= \"true\" convertWarningsToExceptions= \"true\" processIsolation= \"false\" stopOnFailure= \"true\" > <testsuites> <testsuite name= \"Integration\" > <directory suffix= \"Test.php\" > ./tests/Integration </directory> </testsuite> <testsuite name= \"Unit\" > <directory suffix= \"Test.php\" > ./tests/Unit </directory> </testsuite> </testsuites> <filter> <!-- For generate coverage report --> <whitelist processUncoveredFilesFromWhitelist= \"true\" > <directory suffix= \".php\" > ./app </directory> </whitelist> </filter> <php> <!-- Environment variables --> <env name= \"APP_ENV\" value= \"testing\" /> <env name= \"APP_KEY\" value= \"App under test\" /> </php> </phpunit> Environment variables c\u00f3 th\u1ec3 khai b\u00e1o tr\u1ef1c ti\u1ebfp trong file phpunit.xml ho\u1eb7c s\u1eed d\u1ee5ng file env.testing (Laravel): APP_NAME = \"App Test\" APP_KEY = ... APP_DEBUG = false APP_URL = http://localhost DB_CONNECTION = mysql DB_HOST = 127.0.0.1 DB_PORT = 3306 DB_DATABASE = db_test DB_USERNAME = db_test DB_PASSWORD = secret Ch\u1ea1y test \u00b6 Ch\u1ea1y to\u00e0n b\u1ed9 test case \u00b6 ./vendor/bin/phpunit Ch\u1ea1y t\u1eebng test suite \u00b6 ./vendor/bin/phpunit --testsuite = Unit ./vendor/bin/phpunit --testsuite = Integration Ch\u1ea1y t\u1eebng file \u00b6 ./vendor/bin/phpunit tests/Unit/ProductServiceTest.php Filter test case \u00b6 ./vendor/bin/phpunit --filter 'TestNamespace\\\\TestCaseClass::testMethod' ./vendor/bin/phpunit --filter 'TestNamespace\\\\TestCaseClass' ./vendor/bin/phpunit --filter TestNamespace ./vendor/bin/phpunit --filter TestCaseClass ./vendor/bin/phpunit --filter testMethod Format output \u00b6 ./vendor/bin/phpunit --testdox Example test \u00b6 <? php // tests/Unit/CalculatorTest.php namespace Tests\\Unit ; use PHPUnit\\Framework\\TestCase ; // PHPUnit_Framework_TestCase (old version) use App\\Calculator ; class CalculatorTest extends TestCase { public function test_add_return_correct_value () { // Given (these numbers) // Arrange input $numbers = [ 1 , 2 ]; // When (add them) // Act: call unit $calculator = new Calculator ; // Class Under Test $actualResult = $calculator -> add ( $numbers ); // Method Under Test // Then (verify the result is correct) // Assert $expectedResult = 3 ; $this -> assertEquals ( $expectedResult , $actualResult ); } } Th\u01b0\u1eddng \u0111\u01b0\u1ee3c chia th\u00e0nh 3 ph\u1ea7n theo c\u00e1c pattern: Given - When - Then Arrange - Act - Assert Setup and Teardown \u00b6 PHPUnit TestCase cung c\u1ea5p m\u1ed9t s\u1ed1 method h\u1ed7 tr\u1ee3 cho vi\u1ec7c chu\u1ea9n b\u1ecb (arrange) input: setUp() : Ch\u1ea1y tr\u01b0\u1edbc m\u1ed7i method test tearDown() : Ch\u1ea1y sau m\u1ed7i method test setUpBeforeClass() : Ch\u1ea1y khi b\u1eaft \u0111\u1ea7u class test tearDownAfterClass() : Ch\u1ea1y sau khi k\u1ebft th\u00fac class test V\u00ed d\u1ee5: class ExampleTest extends TestCase { protected static $db ; protected $classUnderTest ; public static function setUpBeforeClass () { self :: $db = new PDO ( 'sqlite::memory:' ); } public function setUp () { parent :: setUp (); $this -> classUnderTest = new MyClass ; // Database begin transaction self :: $db -> beginTransaction (); } public function test_add_return_correct_value () { } public function test_add_throws_exception_if_input_is_nan () { } public function tearDown () { // Rollback transaction for fresh database state self :: $db -> rollback (); } public static function tearDownAfterClass () { self :: $db = null ; } } Tr\u00ecnh t\u1ef1 PHPUnit th\u1ef1c hi\u1ec7n test: (1) ExampleTest::setUpBeforeClass() (2) ExampleTest::setUp() (3) ExampleTest::test_add_return_correct_value() (4) ExampleTest::tearDown() (5) ExampleTest::setUp() (6) ExampleTest::test_add_throws_exception_if_input_is_nan() (7) ExampleTest::tearDown() (8) ExampleTest::tearDownAfterClass() Assertion \u00b6 ** * Verify $actualValue equals to $expectedValue ? * N\u1ebfu kh\u00f4ng \u0111\u00fang , th\u00ec show ra message * N\u1ebfu kh\u00f4ng truy\u1ec1n v\u00e0o message th\u00ec PHPUnit s\u1ebd t\u1ef1 \u0111\u1ed9ng generate : * => Failed asserting that 4 matches expected 5. */ function assertEquals ( $expectedValue , $actualValue , $message = '' ) M\u1ed9t s\u1ed1 assertion th\u01b0\u1eddng d\u00f9ng: assertTrue() <> assertFalse() assertEquals() <> assertNotEquals() : So s\u00e1nh b\u1eb1ng assertSame() <> assertNotSame() : So s\u00e1nh b\u1eb1ng, c\u00f9ng ki\u1ec3u assertContains() <> assertNotContains() : Array contain, String contains assertArrayHasKey() <> assertArrayNotHasKey() assertInstanceOf() <> assertNotInstanceOf() : \u0110\u1ed1i t\u01b0\u1ee3ng thu\u1ed9c class assertCount() expectException() : Expect s\u1ebd c\u00f3 Exception khi g\u1ecdi ch\u1ea1y unit, ch\u00fa \u00fd ph\u1ea3i g\u1ecdi tr\u01b0\u1edbc khi g\u1ecdi method / function public function test_foo () { $this -> expectException ( InvalidArgument :: class ); $this -> classUnderTest -> execute (); } Best practices \u00b6 S\u1eed d\u1ee5ng assertion ph\u00f9 h\u1ee3p Code d\u1ec5 \u0111\u1ecdc hi\u1ec3u h\u01a1n N\u1ebfu assert failed th\u00ec message sinh ra c\u0169ng d\u1ec5 hi\u1ec3u h\u01a1n Signature c\u1ee7a c\u00e1c method assert th\u01b0\u1eddng c\u00f3 c\u00e1c tham s\u1ed1 theo th\u1ee9 t\u1ef1 l\u00e0 expected value (gi\u00e1 tr\u1ecb mong mu\u1ed1n), actual value (gi\u00e1 tr\u1ecb th\u1ef1c t\u1ebf khi ch\u1ea1y unit), message (message th\u00f4ng b\u00e1o n\u1ebfu fail) n\u00ean c\u1ea7n truy\u1ec1n theo th\u1ee9 t\u1ef1 \u0111\u1ec3 PHPUnit c\u00f3 th\u1ec3 generate ra message b\u00e1o l\u1ed7i ch\u00ednh x\u00e1c $this -> assertEquals ( $expected , $actual ); // => Failed asserting that $actual matches expected $expected. $this -> assertTrue ( $expected == $actual ); // => Failed asserting that false is true?? $this -> assertSame ( $expected , $actual ); $this -> assertTrue ( $expected === $actual ); $this -> assertContains ( $element , $array ); $this -> assertTrue ( in_array ( $element , $array ); $this -> assertCount ( $expected , $actual ); $this -> assertTrue ( count ( $actual ) == $expected ); $this -> assertInstanceOf ( ExpectedClass :: class , $actual ); $this -> assertTrue ( $actual instanceOf ExpectedClass ); Data provider \u00b6 S\u1eed d\u1ee5ng @dataProvider cho nh\u1eefng tr\u01b0\u1eddng h\u1ee3p ch\u1ec9 kh\u00e1c nhau input, output /** * @dataProvider provider_test_foo */ public function test_foo ( $variableOne , $variableTwo ) { $this -> assertEquals ( $variableOne , $this -> classUnderTest -> execute ( $variableTwo )); } public function provider_test_foo () { return [ [ 'test 1, variable one' , 'test 1, variable two' ], [ 'test 2, variable one' , 'test 2, variable two' ], [ 'test 3, variable one' , 'test 3, variable two' ], ]; }","title":"PHPUnit"},{"location":"03-phpunit/#phpunit","text":"","title":"PHPUnit"},{"location":"03-phpunit/#cai-at","text":"C\u00e0i \u0111\u1eb7t theo t\u1eebng project: composer require --dev phpunit/phpunit Khi \u0111\u00f3 ta c\u00f3 tool: ./vendor/bin/phpunit","title":"C\u00e0i \u0111\u1eb7t"},{"location":"03-phpunit/#cau-hinh","text":"File c\u1ea5u h\u00ecnh phpunit.xml (th\u01b0\u1eddng \u0111\u00e3 c\u00f3 s\u1eb5n trong project Laravel): <?xml version=\"1.0\" encoding=\"UTF-8\"?> <phpunit bootstrap= \"vendor/autoload.php\" colors= \"true\" convertErrorsToExceptions= \"true\" convertNoticesToExceptions= \"true\" convertWarningsToExceptions= \"true\" processIsolation= \"false\" stopOnFailure= \"true\" > <testsuites> <testsuite name= \"Integration\" > <directory suffix= \"Test.php\" > ./tests/Integration </directory> </testsuite> <testsuite name= \"Unit\" > <directory suffix= \"Test.php\" > ./tests/Unit </directory> </testsuite> </testsuites> <filter> <!-- For generate coverage report --> <whitelist processUncoveredFilesFromWhitelist= \"true\" > <directory suffix= \".php\" > ./app </directory> </whitelist> </filter> <php> <!-- Environment variables --> <env name= \"APP_ENV\" value= \"testing\" /> <env name= \"APP_KEY\" value= \"App under test\" /> </php> </phpunit> Environment variables c\u00f3 th\u1ec3 khai b\u00e1o tr\u1ef1c ti\u1ebfp trong file phpunit.xml ho\u1eb7c s\u1eed d\u1ee5ng file env.testing (Laravel): APP_NAME = \"App Test\" APP_KEY = ... APP_DEBUG = false APP_URL = http://localhost DB_CONNECTION = mysql DB_HOST = 127.0.0.1 DB_PORT = 3306 DB_DATABASE = db_test DB_USERNAME = db_test DB_PASSWORD = secret","title":"C\u1ea5u h\u00ecnh"},{"location":"03-phpunit/#chay-test","text":"","title":"Ch\u1ea1y test"},{"location":"03-phpunit/#chay-toan-bo-test-case","text":"./vendor/bin/phpunit","title":"Ch\u1ea1y to\u00e0n b\u1ed9 test case"},{"location":"03-phpunit/#chay-tung-test-suite","text":"./vendor/bin/phpunit --testsuite = Unit ./vendor/bin/phpunit --testsuite = Integration","title":"Ch\u1ea1y t\u1eebng test suite"},{"location":"03-phpunit/#chay-tung-file","text":"./vendor/bin/phpunit tests/Unit/ProductServiceTest.php","title":"Ch\u1ea1y t\u1eebng file"},{"location":"03-phpunit/#filter-test-case","text":"./vendor/bin/phpunit --filter 'TestNamespace\\\\TestCaseClass::testMethod' ./vendor/bin/phpunit --filter 'TestNamespace\\\\TestCaseClass' ./vendor/bin/phpunit --filter TestNamespace ./vendor/bin/phpunit --filter TestCaseClass ./vendor/bin/phpunit --filter testMethod","title":"Filter test case"},{"location":"03-phpunit/#format-output","text":"./vendor/bin/phpunit --testdox","title":"Format output"},{"location":"03-phpunit/#example-test","text":"<? php // tests/Unit/CalculatorTest.php namespace Tests\\Unit ; use PHPUnit\\Framework\\TestCase ; // PHPUnit_Framework_TestCase (old version) use App\\Calculator ; class CalculatorTest extends TestCase { public function test_add_return_correct_value () { // Given (these numbers) // Arrange input $numbers = [ 1 , 2 ]; // When (add them) // Act: call unit $calculator = new Calculator ; // Class Under Test $actualResult = $calculator -> add ( $numbers ); // Method Under Test // Then (verify the result is correct) // Assert $expectedResult = 3 ; $this -> assertEquals ( $expectedResult , $actualResult ); } } Th\u01b0\u1eddng \u0111\u01b0\u1ee3c chia th\u00e0nh 3 ph\u1ea7n theo c\u00e1c pattern: Given - When - Then Arrange - Act - Assert","title":"Example test"},{"location":"03-phpunit/#setup-and-teardown","text":"PHPUnit TestCase cung c\u1ea5p m\u1ed9t s\u1ed1 method h\u1ed7 tr\u1ee3 cho vi\u1ec7c chu\u1ea9n b\u1ecb (arrange) input: setUp() : Ch\u1ea1y tr\u01b0\u1edbc m\u1ed7i method test tearDown() : Ch\u1ea1y sau m\u1ed7i method test setUpBeforeClass() : Ch\u1ea1y khi b\u1eaft \u0111\u1ea7u class test tearDownAfterClass() : Ch\u1ea1y sau khi k\u1ebft th\u00fac class test V\u00ed d\u1ee5: class ExampleTest extends TestCase { protected static $db ; protected $classUnderTest ; public static function setUpBeforeClass () { self :: $db = new PDO ( 'sqlite::memory:' ); } public function setUp () { parent :: setUp (); $this -> classUnderTest = new MyClass ; // Database begin transaction self :: $db -> beginTransaction (); } public function test_add_return_correct_value () { } public function test_add_throws_exception_if_input_is_nan () { } public function tearDown () { // Rollback transaction for fresh database state self :: $db -> rollback (); } public static function tearDownAfterClass () { self :: $db = null ; } } Tr\u00ecnh t\u1ef1 PHPUnit th\u1ef1c hi\u1ec7n test: (1) ExampleTest::setUpBeforeClass() (2) ExampleTest::setUp() (3) ExampleTest::test_add_return_correct_value() (4) ExampleTest::tearDown() (5) ExampleTest::setUp() (6) ExampleTest::test_add_throws_exception_if_input_is_nan() (7) ExampleTest::tearDown() (8) ExampleTest::tearDownAfterClass()","title":"Setup and Teardown"},{"location":"03-phpunit/#assertion","text":"** * Verify $actualValue equals to $expectedValue ? * N\u1ebfu kh\u00f4ng \u0111\u00fang , th\u00ec show ra message * N\u1ebfu kh\u00f4ng truy\u1ec1n v\u00e0o message th\u00ec PHPUnit s\u1ebd t\u1ef1 \u0111\u1ed9ng generate : * => Failed asserting that 4 matches expected 5. */ function assertEquals ( $expectedValue , $actualValue , $message = '' ) M\u1ed9t s\u1ed1 assertion th\u01b0\u1eddng d\u00f9ng: assertTrue() <> assertFalse() assertEquals() <> assertNotEquals() : So s\u00e1nh b\u1eb1ng assertSame() <> assertNotSame() : So s\u00e1nh b\u1eb1ng, c\u00f9ng ki\u1ec3u assertContains() <> assertNotContains() : Array contain, String contains assertArrayHasKey() <> assertArrayNotHasKey() assertInstanceOf() <> assertNotInstanceOf() : \u0110\u1ed1i t\u01b0\u1ee3ng thu\u1ed9c class assertCount() expectException() : Expect s\u1ebd c\u00f3 Exception khi g\u1ecdi ch\u1ea1y unit, ch\u00fa \u00fd ph\u1ea3i g\u1ecdi tr\u01b0\u1edbc khi g\u1ecdi method / function public function test_foo () { $this -> expectException ( InvalidArgument :: class ); $this -> classUnderTest -> execute (); }","title":"Assertion"},{"location":"03-phpunit/#best-practices","text":"S\u1eed d\u1ee5ng assertion ph\u00f9 h\u1ee3p Code d\u1ec5 \u0111\u1ecdc hi\u1ec3u h\u01a1n N\u1ebfu assert failed th\u00ec message sinh ra c\u0169ng d\u1ec5 hi\u1ec3u h\u01a1n Signature c\u1ee7a c\u00e1c method assert th\u01b0\u1eddng c\u00f3 c\u00e1c tham s\u1ed1 theo th\u1ee9 t\u1ef1 l\u00e0 expected value (gi\u00e1 tr\u1ecb mong mu\u1ed1n), actual value (gi\u00e1 tr\u1ecb th\u1ef1c t\u1ebf khi ch\u1ea1y unit), message (message th\u00f4ng b\u00e1o n\u1ebfu fail) n\u00ean c\u1ea7n truy\u1ec1n theo th\u1ee9 t\u1ef1 \u0111\u1ec3 PHPUnit c\u00f3 th\u1ec3 generate ra message b\u00e1o l\u1ed7i ch\u00ednh x\u00e1c $this -> assertEquals ( $expected , $actual ); // => Failed asserting that $actual matches expected $expected. $this -> assertTrue ( $expected == $actual ); // => Failed asserting that false is true?? $this -> assertSame ( $expected , $actual ); $this -> assertTrue ( $expected === $actual ); $this -> assertContains ( $element , $array ); $this -> assertTrue ( in_array ( $element , $array ); $this -> assertCount ( $expected , $actual ); $this -> assertTrue ( count ( $actual ) == $expected ); $this -> assertInstanceOf ( ExpectedClass :: class , $actual ); $this -> assertTrue ( $actual instanceOf ExpectedClass );","title":"Best practices"},{"location":"03-phpunit/#data-provider","text":"S\u1eed d\u1ee5ng @dataProvider cho nh\u1eefng tr\u01b0\u1eddng h\u1ee3p ch\u1ec9 kh\u00e1c nhau input, output /** * @dataProvider provider_test_foo */ public function test_foo ( $variableOne , $variableTwo ) { $this -> assertEquals ( $variableOne , $this -> classUnderTest -> execute ( $variableTwo )); } public function provider_test_foo () { return [ [ 'test 1, variable one' , 'test 1, variable two' ], [ 'test 2, variable one' , 'test 2, variable two' ], [ 'test 3, variable one' , 'test 3, variable two' ], ]; }","title":"Data provider"},{"location":"04-code-coverage/","text":"Code Coverage \u00b6 Kh\u00e1i ni\u1ec7m \u00b6 Code coverage l\u00e0 m\u1ed9t ph\u01b0\u01a1ng ph\u00e1p \u0111\u00e1nh gi\u00e1 \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 m\u00f4 t\u1ea3 m\u1ee9c \u0111\u1ed9 m\u00e0 source code c\u1ee7a m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh \u0111\u00e3 \u0111\u01b0\u1ee3c th\u1ef1c thi, khi m\u00e0 m\u1ed9t b\u1ed9 Test c\u1ee5 th\u1ec3 ch\u1ea1y. N\u00f3i m\u1ed9t c\u00e1ch kh\u00e1c, Code coverage l\u00e0 m\u1ed9t c\u00e1ch \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o r\u1eb1ng Tests c\u1ee7a b\u1ea1n th\u1ef1c s\u1ef1 \u0111ang test Codes c\u1ee7a b\u1ea1n! C\u00f4ng th\u1ee9c t\u00ednh Code coverage: Code Coverage = (T\u1ed5ng s\u1ed1 d\u00f2ng Code \u0111\u01b0\u1ee3c g\u1ecdi b\u1edfi c\u00e1c b\u00e0i Tests c\u1ee7a b\u1ea1n) / (T\u1ed5ng s\u1ed1 d\u00f2ng Code trong th\u1ef1c t\u1ebf) x 100% V\u00ed d\u1ee5: N\u1ebfu code coverage c\u1ee7a b\u1ea1n l\u00e0 90%, \u0111i\u1ec1u \u0111\u00f3 c\u00f3 ngh\u0129a l\u00e0 90% c\u00e1c d\u00f2ng codes trong project c\u1ee7a b\u1ea1n \u0111\u00e3 \u0111\u01b0\u1ee3c g\u1ecdi ghi ch\u1ea1y Test. T\u1ea1o report v\u1edbi PHPUnit \u00b6 Coverage driver \u00b6 \u0110\u1ec3 generate coverage report b\u1eb1ng PHPUnit, c\u1ea7n c\u00f3 coverage driver . C\u00f3 3 drivers bao g\u1ed3m (\u01b0u ti\u00ean t\u1eeb tr\u00ean xu\u1ed1ng d\u01b0\u1edbi): pcov cho PHPUnit version >= 8 php -dextension = pcov.so -dpcov.enabled = 1 -dpcov.directory = app ./vendor/bin/phpunit --coverage-text NOTE : pcov.directory=app , trong \u0111\u00f3 app l\u00e0 th\u01b0 m\u1ee5c ch\u1ee9a source code phpdbg phpdbg -qrr ./vendor/bin/phpunit --coverage-text XDebug php -dzend_extension = xdebug.so ./vendor/bin/phpunit --coverage-text Coverage format \u00b6 C\u00f3 nhi\u1ec1u lo\u1ea1i format cho coverage: Code Coverage Options: --coverage-clover <file> Generate code coverage report in Clover XML format --coverage-crap4j <file> Generate code coverage report in Crap4J XML format --coverage-html <dir> Generate code coverage report in HTML format --coverage-php <file> Export PHP_CodeCoverage object to file --coverage-text=<file> Generate code coverage report in text format [default: standard output] --coverage-xml <dir> Generate code coverage report in PHPUnit XML format Nh\u01b0ng th\u00f4ng d\u1ee5ng nh\u1ea5t l\u00e0 --coverage-text th\u01b0\u1eddng d\u00f9ng trong CI ho\u1eb7c xem nhanh k\u1ebft qu\u1ea3 v\u00e0 --coverage-html \u0111\u1ec3 xem chi ti\u1ebft d\u01b0\u1edbi d\u1ea1ng web dashboard v\u00e0 --coverage-clover d\u00f9ng cho CI. 100% code coverage \u00b6 100% code coverage is not our main purpose of test!!! 70 - 80% is ok! Quotes: Quality over quantity If it scares you then write test for it Think how to write enough test cases Think how to write simple code, simple test Think how to write fast test","title":"Code Coverage"},{"location":"04-code-coverage/#code-coverage","text":"","title":"Code Coverage"},{"location":"04-code-coverage/#khai-niem","text":"Code coverage l\u00e0 m\u1ed9t ph\u01b0\u01a1ng ph\u00e1p \u0111\u00e1nh gi\u00e1 \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 m\u00f4 t\u1ea3 m\u1ee9c \u0111\u1ed9 m\u00e0 source code c\u1ee7a m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh \u0111\u00e3 \u0111\u01b0\u1ee3c th\u1ef1c thi, khi m\u00e0 m\u1ed9t b\u1ed9 Test c\u1ee5 th\u1ec3 ch\u1ea1y. N\u00f3i m\u1ed9t c\u00e1ch kh\u00e1c, Code coverage l\u00e0 m\u1ed9t c\u00e1ch \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o r\u1eb1ng Tests c\u1ee7a b\u1ea1n th\u1ef1c s\u1ef1 \u0111ang test Codes c\u1ee7a b\u1ea1n! C\u00f4ng th\u1ee9c t\u00ednh Code coverage: Code Coverage = (T\u1ed5ng s\u1ed1 d\u00f2ng Code \u0111\u01b0\u1ee3c g\u1ecdi b\u1edfi c\u00e1c b\u00e0i Tests c\u1ee7a b\u1ea1n) / (T\u1ed5ng s\u1ed1 d\u00f2ng Code trong th\u1ef1c t\u1ebf) x 100% V\u00ed d\u1ee5: N\u1ebfu code coverage c\u1ee7a b\u1ea1n l\u00e0 90%, \u0111i\u1ec1u \u0111\u00f3 c\u00f3 ngh\u0129a l\u00e0 90% c\u00e1c d\u00f2ng codes trong project c\u1ee7a b\u1ea1n \u0111\u00e3 \u0111\u01b0\u1ee3c g\u1ecdi ghi ch\u1ea1y Test.","title":"Kh\u00e1i ni\u1ec7m"},{"location":"04-code-coverage/#tao-report-voi-phpunit","text":"","title":"T\u1ea1o report v\u1edbi PHPUnit"},{"location":"04-code-coverage/#coverage-driver","text":"\u0110\u1ec3 generate coverage report b\u1eb1ng PHPUnit, c\u1ea7n c\u00f3 coverage driver . C\u00f3 3 drivers bao g\u1ed3m (\u01b0u ti\u00ean t\u1eeb tr\u00ean xu\u1ed1ng d\u01b0\u1edbi): pcov cho PHPUnit version >= 8 php -dextension = pcov.so -dpcov.enabled = 1 -dpcov.directory = app ./vendor/bin/phpunit --coverage-text NOTE : pcov.directory=app , trong \u0111\u00f3 app l\u00e0 th\u01b0 m\u1ee5c ch\u1ee9a source code phpdbg phpdbg -qrr ./vendor/bin/phpunit --coverage-text XDebug php -dzend_extension = xdebug.so ./vendor/bin/phpunit --coverage-text","title":"Coverage driver"},{"location":"04-code-coverage/#coverage-format","text":"C\u00f3 nhi\u1ec1u lo\u1ea1i format cho coverage: Code Coverage Options: --coverage-clover <file> Generate code coverage report in Clover XML format --coverage-crap4j <file> Generate code coverage report in Crap4J XML format --coverage-html <dir> Generate code coverage report in HTML format --coverage-php <file> Export PHP_CodeCoverage object to file --coverage-text=<file> Generate code coverage report in text format [default: standard output] --coverage-xml <dir> Generate code coverage report in PHPUnit XML format Nh\u01b0ng th\u00f4ng d\u1ee5ng nh\u1ea5t l\u00e0 --coverage-text th\u01b0\u1eddng d\u00f9ng trong CI ho\u1eb7c xem nhanh k\u1ebft qu\u1ea3 v\u00e0 --coverage-html \u0111\u1ec3 xem chi ti\u1ebft d\u01b0\u1edbi d\u1ea1ng web dashboard v\u00e0 --coverage-clover d\u00f9ng cho CI.","title":"Coverage format"},{"location":"04-code-coverage/#100-code-coverage","text":"100% code coverage is not our main purpose of test!!! 70 - 80% is ok! Quotes: Quality over quantity If it scares you then write test for it Think how to write enough test cases Think how to write simple code, simple test Think how to write fast test","title":"100% code coverage"},{"location":"05-test-doubles-and-di/","text":"Test Doubles v\u00e0 DI \u00b6 Kh\u00e1i ni\u1ec7m \u00b6 M\u1ed9t trong nh\u1eefng y\u00eau c\u1ea7u c\u01a1 b\u1ea3n c\u1ee7a Unit Test \u0111\u00f3 l\u00e0 t\u00ednh c\u00f4 l\u1eadp ( isolation ). Nh\u00ecn chung th\u00ec t\u00ednh c\u00f4 l\u1eadp l\u00e0 r\u1ea5t kh\u00f3 (n\u1ebfu kh\u00f4ng mu\u1ed1n n\u00f3i l\u00e0 kh\u00f4ng th\u1ec3) b\u1edfi lu\u00f4n lu\u00f4n c\u00f3 r\u1ea5t nhi\u1ec1u dependencies trong c\u1ea3 project. V\u00ec th\u1ebf, kh\u00e1i ni\u1ec7m v\u1ec1 Test Doubles ra \u0111\u1eddi. M\u1ed9t Test Double cho ph\u00e9p ch\u00fang ta lo\u1ea1i b\u1ecf dependency nguy\u00ean b\u1ea3n, t\u1eeb \u0111\u00f3 gi\u00fap c\u00f4 l\u1eadp unit. D\u01b0\u1edbi \u0111\u00e2y l\u00e0 m\u1ed9t v\u00e0i lo\u1ea1i Test Doubles M\u1ed9t v\u00e0i ph\u1ea7n trong c\u00e1c \u0111\u1ecbnh ngh\u0129a sau \u0111\u01b0\u1ee3c l\u1ea5y t\u1eeb b\u00e0i vi\u1ebft Mocks Aren't Stubs tr\u00ean blog c\u1ee7a Martin Fowler Dummies \u00b6 Dummy l\u00e0 objects \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o nh\u01b0ng m\u00e0 kh\u00f4ng h\u1ec1 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng. Ch\u00fang th\u01b0\u1eddng ch\u1ec9 \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 ho\u00e0n th\u00e0nh danh s\u00e1ch parameter. Fake \u00b6 Fake objects th\u1ef1c ra c\u00f3 mang nh\u1eefng tri\u1ec3n khai logic, th\u1ebf nh\u01b0ng th\u01b0\u1eddng s\u1eed d\u1ee5ng nh\u1eefng \"l\u1ed1i t\u1eaft\", khi\u1ebfn ch\u00fang kh\u00f4ng th\u00edch h\u1ee3p \u0111\u1ec3 tri\u1ec3n khai tr\u00ean production (V\u00ed d\u1ee5 nh\u01b0 in memory database) Stubs \u00b6 Stubs \u0111\u01b0a ra nh\u1eefng c\u00e2u tr\u1ea3 l\u1eddi c\u00f3 s\u1eb5n cho c\u00e1c l\u1eddi g\u1ecdi h\u00e0m \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n trong qu\u00e1 tr\u00ecnh test, v\u00e0 th\u01b0\u1eddng s\u1ebd kh\u00f4ng tr\u1ea3 v\u1ec1 b\u1ea5t c\u1ee9 c\u00e1i g\u00ec ngo\u00e0i nh\u1eefng th\u1ee9 m\u00e0 ch\u00fang \u0111\u00e3 \u0111\u01b0\u1ee3c l\u1eadp tr\u00ecnh trong b\u00e0i test. Mocks \u00b6 Mocks l\u00e0 objects \u0111\u00e3 \u0111\u01b0\u1ee3c l\u1eadp tr\u00ecnh tr\u01b0\u1edbc v\u1edbi c\u00e1c expectations, t\u1ea1o ra m\u1ed9t \u0111\u1eb7c t\u1ea3 cho l\u1eddi g\u1ecdi m\u00e0 ch\u00fang d\u1ef1 ki\u1ebfn s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c. Test c\u00f4 l\u1eadp \u00b6 Test c\u00f4 l\u1eadp: Gi\u1ea3 l\u1eadp access API / web service ngo\u00e0i (m\u1ea1ng) Gi\u1ea3 l\u1eadp access database? Gi\u1ea3 l\u1eadp l\u1eddi g\u1ecdi h\u00e0m t\u1eeb c\u00e1c class kh\u00e1c? Gi\u1ea3 l\u1eadp l\u00e0 g\u00ec? Gi\u1ea3 l\u1eadp = thay th\u1ebf c\u00e1c object s\u1eed d\u1ee5ng cho production v\u1edbi 1 m\u1ed9t object gi\u00fap cho vi\u1ec7c testing Gi\u1ea3 l\u1eadp = thay th\u1ebf real object v\u1edbi mock object Mock object b\u1eaft ch\u01b0\u1edbc h\u00e0nh vi c\u1ee7a real object, nh\u01b0ng ch\u00fang ta c\u00f3 th\u1ec3 t\u1ef1 \u0111\u1ecbnh ngh\u0129a k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 theo t\u1eebng k\u1ecbch b\u1ea3n test case C\u00f3 hai quan \u0111i\u1ec3m v\u1ec1 unit test c\u00f4 l\u1eadp: Sociable test : Ch\u1ec9 gi\u1ea3 l\u1eadp (mock) c\u00e1c dependencies g\u00e2y ch\u1eadm ho\u1eb7c c\u00f3 side effects l\u1edbn ho\u1eb7c kh\u00f4ng th\u1ec3 d\u00f9ng trong test environment: database, network call... Solitary test : Gi\u1ea3 l\u1eadp t\u1ea5t c\u1ea3 dependencies https://martinfowler.com/bliki/UnitTest.html V\u00ed d\u1ee5: C\u00f3 3 class Order , Customer , Product , v\u1edbi y\u00eau c\u1ea7u khi user order 1 s\u1ea3n ph\u1ea9m, n\u1ebfu ng\u00e0y order tr\u00f9ng v\u1edbi ng\u00e0y sinh c\u1ee7a user th\u00ec user s\u1ebd \u0111\u01b0\u1ee3c gi\u1ea3m 20%. Class Order c\u00f3 2 dependencies l\u00e0 Product v\u00e0 Customer , c\u1ea7n vi\u1ebft test cho method Order::price() : Sociable Test : do Product::getPrice() v\u00e0 Customer::getDiscount() \u0111\u1ec1u kh\u00f4ng c\u00f3 logic ph\u1ee9c t\u1ea1p hay c\u00f3 kh\u1ea3 n\u0103ng l\u00e0m ch\u1eadm test n\u00ean s\u1ebd kh\u00f4ng th\u1ef1c hi\u1ec7n gi\u1ea3 l\u1eadp namespace Tests\\Unit ; use PHPUnit\\Framework\\TestCase ; use App\\Customer ; use App\\Product ; use App\\Order ; use DateTimeImmutable ; class SociableOrderTest extends TestCase { public function test_price_return_correct_value () { $product = new Product ( 'PS4' , 100 ); $customer = new Customer ( 'Hunter' , new DateTimeImmutable ( date ( 'Y/m/d' ))); $order = new Order ( $customer , $product ); $this -> assertEquals ( 80 , $order -> price ()); } } Solitary Test : class SolitaryOrderTest extends TestCase { public function test_price_return_correct_value () { // Gi\u1ea3 l\u1eadp (mock) Product $product = $this -> createMock ( Product :: class ); // Expect $product->getPrice() \u0111\u01b0\u1ee3c g\u1ecdi 1 l\u1ea7n v\u00e0 tr\u1ea3 v\u1ec1 100 $product -> expects ( $this -> once ()) -> method ( 'getPrice' ) -> willReturn ( 100 ); // Gi\u1ea3 l\u1eadp (mock) Customer $customer = $this -> createMock ( Customer :: class ); // Expect $customer->getDiscount() \u0111\u01b0\u1ee3c g\u1ecdi 1 l\u1ea7n v\u00e0 tr\u1ea3 v\u1ec1 20 $customer -> expects ( $this -> once ()) -> method ( 'getDiscount' ) -> willReturn ( 20 ); $order = new Order ( $customer , $product ); $this -> assertEquals ( 80 , $order -> price ()); } } V\u00ec \u0111\u00e3 \u0111\u01b0\u1ee3c gi\u1ea3 l\u1eadp n\u00ean khi logic c\u1ee7a Product::getPrice() v\u00e0 Customer::getDiscount() thay \u0111\u1ed5i th\u00ec SolitaryOrderTest kh\u00f4ng c\u1ea7n ph\u1ea3i update l\u1ea1i. V\u1eady khi n\u00e0o c\u1ea7n gi\u1ea3 l\u1eadp (mock), ch\u00fang ta c\u00f3 th\u1ec3 \u00e1p d\u1ee5ng c\u1ea3 2 quan \u0111i\u1ec3m: N\u1ebfu code \u0111\u01b0\u1ee3c c\u1ea5u tr\u00fac t\u1ed1t th\u00ec th\u01b0\u1eddng c\u00f3 2 lo\u1ea1i class: Model: nhi\u1ec7m v\u1ee5 ch\u00ednh l\u00e0 \u0111\u1ec3 l\u01b0u d\u1eef li\u1ec7u b\u00ean trong v\u00e0 kh\u00f4ng th\u1ef1c hi\u1ec7n nhi\u1ec1u logic b\u00ean trong => kh\u00f4ng c\u1ea7n mock, ch\u1ec9 \u0111\u01a1n gi\u1ea3n l\u00e0 kh\u1edfi t\u1ea1o \u0111\u1ed1i t\u01b0\u1ee3ng v\u00e0 truy\u1ec1n v\u00e0o fake data cho n\u00f3 Service: nhi\u1ec7m v\u1ee5 ch\u00ednh l\u00e0 th\u1ef1c hi\u1ec7n c\u00f4ng vi\u1ec7c, logic => mock class OrderTest extends TestCase { public function test_price_return_correct_value () { $product = new Product ( 'PS4' , 100 ); // Gi\u1ea3 l\u1eadp (mock) Customer $customer = $this -> createMock ( Customer :: class ); // Expect $customer->getDiscount() \u0111\u01b0\u1ee3c g\u1ecdi 1 l\u1ea7n v\u00e0 tr\u1ea3 v\u1ec1 20 $customer -> expects ( $this -> once ()) -> method ( 'getDiscount' ) -> willReturn ( 20 ); $order = new Order ( $customer , $product ); $this -> assertEquals ( 80 , $order -> price ()); } } Khi vi\u1ec7c mock qu\u00e1 ph\u1ee9c t\u1ea1p h\u00e3y th\u1ef1c hi\u1ec7n refactor code ho\u1eb7c th\u1ef1c hi\u1ec7n integration test Dependency Injection \u00b6 Method Order::price() c\u1ea7n s\u1eed d\u1ee5ng Product::getPrice() v\u00e0 Customer::getDiscount() n\u00ean class Order c\u00f3 2 dependencies l\u00e0 Product v\u00e0 Customer Mu\u1ed1n gi\u1ea3 l\u1eadp th\u00ec c\u00e1c dependencies ph\u1ea3i \u0111\u01b0\u1ee3c khai b\u00e1o t\u01b0\u1eddng minh ( explicit dependencies ), t\u1ee9c l\u00e0 \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o constructor, class kh\u00f4ng c\u00f3 nhi\u1ec7m v\u1ee5 kh\u1edfi t\u1ea1o dependencies N\u1ebfu kh\u1edfi t\u1ea1o b\u1eb1ng new ho\u1eb7c d\u00f9ng static method b\u00ean trong th\u00ec kh\u00f4ng c\u00f3 c\u00e1ch n\u00e0o \u0111\u1ec3 gi\u1ea3 l\u1eadp (th\u1ef1c ra th\u00ec c\u0169ng c\u00f3 nh\u01b0ng th\u01b0\u1eddng d\u00f9ng trick v\u1ec1 autoloading c\u1ee7a PHP ch\u1ee9 PHP kh\u00f4ng h\u1ed7 tr\u1ee3 k\u1ef9 thu\u1eadt Monkey Patching (*)) // Bad method public function register ( array $inputs ) { // ... ( new MailService ()) -> send ( $user ); // \u2026 MailService :: send ( $user ); } // Good, using dependency injection public function __construct ( MailService $mailService ) { $this -> mailService = $mailService ; } public function register ( array $inputs ) { $transaction = $this -> mailService -> send ( $user ); } Mocks vs Stubs \u00b6 C\u00f3 nhi\u1ec1u lo\u1ea1i test doubles, nh\u01b0ng ch\u1ec9 c\u1ea7n focus v\u00e0o 2 lo\u1ea1i ch\u00ednh Stubs \u00b6 Gi\u1ea3 l\u1eadp tr\u1ea1ng th\u00e1i => lo\u1ea1i b\u1ecf t\u1ea5t c\u1ea3 logic b\u00ean trong method c\u1ee7a object th\u1eadt v\u00e0 c\u00f3 th\u1ec3 thay \u0111\u1ed5i k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 c\u1ee7a method theo \u00fd mu\u1ed1n // Create mock object $product = $this -> createMock ( Product :: class ); // Stub method price, make it return 100 $product -> method ( 'getPrice' ) -> will ( $this -> returnValue ( 100 )); Mocks \u00b6 Verify h\u00e0nh vi => khi method under test \u0111\u01b0\u1ee3c g\u1ecdi th\u00ec ch\u00fang ta expect mock method c\u0169ng \u0111\u01b0\u1ee3c g\u1ecdi, 1 l\u1ea7n ho\u1eb7c 2 l\u1ea7n ho\u1eb7c nhi\u1ec1u l\u1ea7n, \u0111\u01b0\u1ee3c truy\u1ec1n tham s\u1ed1 g\u00ec... public function test_order_sends_mail_if_succeeded () { $mailService = $this -> createMock ( MailService :: class ); $order = new Order ( 'Wine' , 'user@localhost' , $mailService ); // Expect method MailService::send \u0111\u01b0\u1ee3c g\u1ecdi duy nh\u1ea5t 1 l\u1ea7n, // v\u1edbi 2 tham s\u1ed1 l\u00e0 'user@localhost' v\u00e0 'Order succeeded!' // Expect c\u1ea7n \u0111\u01b0\u1ee3c vi\u1ebft tr\u01b0\u1edbc khi g\u1ecdi method test $mailService -> expects ( once ()) -> method ( 'send' ); -> with ( $this -> equalTo ( 'user@localhost' ), $this -> equalTo ( 'Order succeeded!' ) ); $result = $order -> process (); $this -> assertTrue ( $result ); } Tham kh\u1ea3o \u00b6 (*) https://github.com/Codeception/AspectMock https://github.com/kahlan/kahlan https://github.com/infection/infection https://www.phpspec.net/en/stable/","title":"Test Doubles v\u00e0 DI"},{"location":"05-test-doubles-and-di/#test-doubles-va-di","text":"","title":"Test Doubles v\u00e0 DI"},{"location":"05-test-doubles-and-di/#khai-niem","text":"M\u1ed9t trong nh\u1eefng y\u00eau c\u1ea7u c\u01a1 b\u1ea3n c\u1ee7a Unit Test \u0111\u00f3 l\u00e0 t\u00ednh c\u00f4 l\u1eadp ( isolation ). Nh\u00ecn chung th\u00ec t\u00ednh c\u00f4 l\u1eadp l\u00e0 r\u1ea5t kh\u00f3 (n\u1ebfu kh\u00f4ng mu\u1ed1n n\u00f3i l\u00e0 kh\u00f4ng th\u1ec3) b\u1edfi lu\u00f4n lu\u00f4n c\u00f3 r\u1ea5t nhi\u1ec1u dependencies trong c\u1ea3 project. V\u00ec th\u1ebf, kh\u00e1i ni\u1ec7m v\u1ec1 Test Doubles ra \u0111\u1eddi. M\u1ed9t Test Double cho ph\u00e9p ch\u00fang ta lo\u1ea1i b\u1ecf dependency nguy\u00ean b\u1ea3n, t\u1eeb \u0111\u00f3 gi\u00fap c\u00f4 l\u1eadp unit. D\u01b0\u1edbi \u0111\u00e2y l\u00e0 m\u1ed9t v\u00e0i lo\u1ea1i Test Doubles M\u1ed9t v\u00e0i ph\u1ea7n trong c\u00e1c \u0111\u1ecbnh ngh\u0129a sau \u0111\u01b0\u1ee3c l\u1ea5y t\u1eeb b\u00e0i vi\u1ebft Mocks Aren't Stubs tr\u00ean blog c\u1ee7a Martin Fowler","title":"Kh\u00e1i ni\u1ec7m"},{"location":"05-test-doubles-and-di/#dummies","text":"Dummy l\u00e0 objects \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o nh\u01b0ng m\u00e0 kh\u00f4ng h\u1ec1 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng. Ch\u00fang th\u01b0\u1eddng ch\u1ec9 \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 ho\u00e0n th\u00e0nh danh s\u00e1ch parameter.","title":"Dummies"},{"location":"05-test-doubles-and-di/#fake","text":"Fake objects th\u1ef1c ra c\u00f3 mang nh\u1eefng tri\u1ec3n khai logic, th\u1ebf nh\u01b0ng th\u01b0\u1eddng s\u1eed d\u1ee5ng nh\u1eefng \"l\u1ed1i t\u1eaft\", khi\u1ebfn ch\u00fang kh\u00f4ng th\u00edch h\u1ee3p \u0111\u1ec3 tri\u1ec3n khai tr\u00ean production (V\u00ed d\u1ee5 nh\u01b0 in memory database)","title":"Fake"},{"location":"05-test-doubles-and-di/#stubs","text":"Stubs \u0111\u01b0a ra nh\u1eefng c\u00e2u tr\u1ea3 l\u1eddi c\u00f3 s\u1eb5n cho c\u00e1c l\u1eddi g\u1ecdi h\u00e0m \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n trong qu\u00e1 tr\u00ecnh test, v\u00e0 th\u01b0\u1eddng s\u1ebd kh\u00f4ng tr\u1ea3 v\u1ec1 b\u1ea5t c\u1ee9 c\u00e1i g\u00ec ngo\u00e0i nh\u1eefng th\u1ee9 m\u00e0 ch\u00fang \u0111\u00e3 \u0111\u01b0\u1ee3c l\u1eadp tr\u00ecnh trong b\u00e0i test.","title":"Stubs"},{"location":"05-test-doubles-and-di/#mocks","text":"Mocks l\u00e0 objects \u0111\u00e3 \u0111\u01b0\u1ee3c l\u1eadp tr\u00ecnh tr\u01b0\u1edbc v\u1edbi c\u00e1c expectations, t\u1ea1o ra m\u1ed9t \u0111\u1eb7c t\u1ea3 cho l\u1eddi g\u1ecdi m\u00e0 ch\u00fang d\u1ef1 ki\u1ebfn s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c.","title":"Mocks"},{"location":"05-test-doubles-and-di/#test-co-lap","text":"Test c\u00f4 l\u1eadp: Gi\u1ea3 l\u1eadp access API / web service ngo\u00e0i (m\u1ea1ng) Gi\u1ea3 l\u1eadp access database? Gi\u1ea3 l\u1eadp l\u1eddi g\u1ecdi h\u00e0m t\u1eeb c\u00e1c class kh\u00e1c? Gi\u1ea3 l\u1eadp l\u00e0 g\u00ec? Gi\u1ea3 l\u1eadp = thay th\u1ebf c\u00e1c object s\u1eed d\u1ee5ng cho production v\u1edbi 1 m\u1ed9t object gi\u00fap cho vi\u1ec7c testing Gi\u1ea3 l\u1eadp = thay th\u1ebf real object v\u1edbi mock object Mock object b\u1eaft ch\u01b0\u1edbc h\u00e0nh vi c\u1ee7a real object, nh\u01b0ng ch\u00fang ta c\u00f3 th\u1ec3 t\u1ef1 \u0111\u1ecbnh ngh\u0129a k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 theo t\u1eebng k\u1ecbch b\u1ea3n test case C\u00f3 hai quan \u0111i\u1ec3m v\u1ec1 unit test c\u00f4 l\u1eadp: Sociable test : Ch\u1ec9 gi\u1ea3 l\u1eadp (mock) c\u00e1c dependencies g\u00e2y ch\u1eadm ho\u1eb7c c\u00f3 side effects l\u1edbn ho\u1eb7c kh\u00f4ng th\u1ec3 d\u00f9ng trong test environment: database, network call... Solitary test : Gi\u1ea3 l\u1eadp t\u1ea5t c\u1ea3 dependencies https://martinfowler.com/bliki/UnitTest.html V\u00ed d\u1ee5: C\u00f3 3 class Order , Customer , Product , v\u1edbi y\u00eau c\u1ea7u khi user order 1 s\u1ea3n ph\u1ea9m, n\u1ebfu ng\u00e0y order tr\u00f9ng v\u1edbi ng\u00e0y sinh c\u1ee7a user th\u00ec user s\u1ebd \u0111\u01b0\u1ee3c gi\u1ea3m 20%. Class Order c\u00f3 2 dependencies l\u00e0 Product v\u00e0 Customer , c\u1ea7n vi\u1ebft test cho method Order::price() : Sociable Test : do Product::getPrice() v\u00e0 Customer::getDiscount() \u0111\u1ec1u kh\u00f4ng c\u00f3 logic ph\u1ee9c t\u1ea1p hay c\u00f3 kh\u1ea3 n\u0103ng l\u00e0m ch\u1eadm test n\u00ean s\u1ebd kh\u00f4ng th\u1ef1c hi\u1ec7n gi\u1ea3 l\u1eadp namespace Tests\\Unit ; use PHPUnit\\Framework\\TestCase ; use App\\Customer ; use App\\Product ; use App\\Order ; use DateTimeImmutable ; class SociableOrderTest extends TestCase { public function test_price_return_correct_value () { $product = new Product ( 'PS4' , 100 ); $customer = new Customer ( 'Hunter' , new DateTimeImmutable ( date ( 'Y/m/d' ))); $order = new Order ( $customer , $product ); $this -> assertEquals ( 80 , $order -> price ()); } } Solitary Test : class SolitaryOrderTest extends TestCase { public function test_price_return_correct_value () { // Gi\u1ea3 l\u1eadp (mock) Product $product = $this -> createMock ( Product :: class ); // Expect $product->getPrice() \u0111\u01b0\u1ee3c g\u1ecdi 1 l\u1ea7n v\u00e0 tr\u1ea3 v\u1ec1 100 $product -> expects ( $this -> once ()) -> method ( 'getPrice' ) -> willReturn ( 100 ); // Gi\u1ea3 l\u1eadp (mock) Customer $customer = $this -> createMock ( Customer :: class ); // Expect $customer->getDiscount() \u0111\u01b0\u1ee3c g\u1ecdi 1 l\u1ea7n v\u00e0 tr\u1ea3 v\u1ec1 20 $customer -> expects ( $this -> once ()) -> method ( 'getDiscount' ) -> willReturn ( 20 ); $order = new Order ( $customer , $product ); $this -> assertEquals ( 80 , $order -> price ()); } } V\u00ec \u0111\u00e3 \u0111\u01b0\u1ee3c gi\u1ea3 l\u1eadp n\u00ean khi logic c\u1ee7a Product::getPrice() v\u00e0 Customer::getDiscount() thay \u0111\u1ed5i th\u00ec SolitaryOrderTest kh\u00f4ng c\u1ea7n ph\u1ea3i update l\u1ea1i. V\u1eady khi n\u00e0o c\u1ea7n gi\u1ea3 l\u1eadp (mock), ch\u00fang ta c\u00f3 th\u1ec3 \u00e1p d\u1ee5ng c\u1ea3 2 quan \u0111i\u1ec3m: N\u1ebfu code \u0111\u01b0\u1ee3c c\u1ea5u tr\u00fac t\u1ed1t th\u00ec th\u01b0\u1eddng c\u00f3 2 lo\u1ea1i class: Model: nhi\u1ec7m v\u1ee5 ch\u00ednh l\u00e0 \u0111\u1ec3 l\u01b0u d\u1eef li\u1ec7u b\u00ean trong v\u00e0 kh\u00f4ng th\u1ef1c hi\u1ec7n nhi\u1ec1u logic b\u00ean trong => kh\u00f4ng c\u1ea7n mock, ch\u1ec9 \u0111\u01a1n gi\u1ea3n l\u00e0 kh\u1edfi t\u1ea1o \u0111\u1ed1i t\u01b0\u1ee3ng v\u00e0 truy\u1ec1n v\u00e0o fake data cho n\u00f3 Service: nhi\u1ec7m v\u1ee5 ch\u00ednh l\u00e0 th\u1ef1c hi\u1ec7n c\u00f4ng vi\u1ec7c, logic => mock class OrderTest extends TestCase { public function test_price_return_correct_value () { $product = new Product ( 'PS4' , 100 ); // Gi\u1ea3 l\u1eadp (mock) Customer $customer = $this -> createMock ( Customer :: class ); // Expect $customer->getDiscount() \u0111\u01b0\u1ee3c g\u1ecdi 1 l\u1ea7n v\u00e0 tr\u1ea3 v\u1ec1 20 $customer -> expects ( $this -> once ()) -> method ( 'getDiscount' ) -> willReturn ( 20 ); $order = new Order ( $customer , $product ); $this -> assertEquals ( 80 , $order -> price ()); } } Khi vi\u1ec7c mock qu\u00e1 ph\u1ee9c t\u1ea1p h\u00e3y th\u1ef1c hi\u1ec7n refactor code ho\u1eb7c th\u1ef1c hi\u1ec7n integration test","title":"Test c\u00f4 l\u1eadp"},{"location":"05-test-doubles-and-di/#dependency-injection","text":"Method Order::price() c\u1ea7n s\u1eed d\u1ee5ng Product::getPrice() v\u00e0 Customer::getDiscount() n\u00ean class Order c\u00f3 2 dependencies l\u00e0 Product v\u00e0 Customer Mu\u1ed1n gi\u1ea3 l\u1eadp th\u00ec c\u00e1c dependencies ph\u1ea3i \u0111\u01b0\u1ee3c khai b\u00e1o t\u01b0\u1eddng minh ( explicit dependencies ), t\u1ee9c l\u00e0 \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o constructor, class kh\u00f4ng c\u00f3 nhi\u1ec7m v\u1ee5 kh\u1edfi t\u1ea1o dependencies N\u1ebfu kh\u1edfi t\u1ea1o b\u1eb1ng new ho\u1eb7c d\u00f9ng static method b\u00ean trong th\u00ec kh\u00f4ng c\u00f3 c\u00e1ch n\u00e0o \u0111\u1ec3 gi\u1ea3 l\u1eadp (th\u1ef1c ra th\u00ec c\u0169ng c\u00f3 nh\u01b0ng th\u01b0\u1eddng d\u00f9ng trick v\u1ec1 autoloading c\u1ee7a PHP ch\u1ee9 PHP kh\u00f4ng h\u1ed7 tr\u1ee3 k\u1ef9 thu\u1eadt Monkey Patching (*)) // Bad method public function register ( array $inputs ) { // ... ( new MailService ()) -> send ( $user ); // \u2026 MailService :: send ( $user ); } // Good, using dependency injection public function __construct ( MailService $mailService ) { $this -> mailService = $mailService ; } public function register ( array $inputs ) { $transaction = $this -> mailService -> send ( $user ); }","title":"Dependency Injection"},{"location":"05-test-doubles-and-di/#mocks-vs-stubs","text":"C\u00f3 nhi\u1ec1u lo\u1ea1i test doubles, nh\u01b0ng ch\u1ec9 c\u1ea7n focus v\u00e0o 2 lo\u1ea1i ch\u00ednh","title":"Mocks vs Stubs"},{"location":"05-test-doubles-and-di/#stubs_1","text":"Gi\u1ea3 l\u1eadp tr\u1ea1ng th\u00e1i => lo\u1ea1i b\u1ecf t\u1ea5t c\u1ea3 logic b\u00ean trong method c\u1ee7a object th\u1eadt v\u00e0 c\u00f3 th\u1ec3 thay \u0111\u1ed5i k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 c\u1ee7a method theo \u00fd mu\u1ed1n // Create mock object $product = $this -> createMock ( Product :: class ); // Stub method price, make it return 100 $product -> method ( 'getPrice' ) -> will ( $this -> returnValue ( 100 ));","title":"Stubs"},{"location":"05-test-doubles-and-di/#mocks_1","text":"Verify h\u00e0nh vi => khi method under test \u0111\u01b0\u1ee3c g\u1ecdi th\u00ec ch\u00fang ta expect mock method c\u0169ng \u0111\u01b0\u1ee3c g\u1ecdi, 1 l\u1ea7n ho\u1eb7c 2 l\u1ea7n ho\u1eb7c nhi\u1ec1u l\u1ea7n, \u0111\u01b0\u1ee3c truy\u1ec1n tham s\u1ed1 g\u00ec... public function test_order_sends_mail_if_succeeded () { $mailService = $this -> createMock ( MailService :: class ); $order = new Order ( 'Wine' , 'user@localhost' , $mailService ); // Expect method MailService::send \u0111\u01b0\u1ee3c g\u1ecdi duy nh\u1ea5t 1 l\u1ea7n, // v\u1edbi 2 tham s\u1ed1 l\u00e0 'user@localhost' v\u00e0 'Order succeeded!' // Expect c\u1ea7n \u0111\u01b0\u1ee3c vi\u1ebft tr\u01b0\u1edbc khi g\u1ecdi method test $mailService -> expects ( once ()) -> method ( 'send' ); -> with ( $this -> equalTo ( 'user@localhost' ), $this -> equalTo ( 'Order succeeded!' ) ); $result = $order -> process (); $this -> assertTrue ( $result ); }","title":"Mocks"},{"location":"05-test-doubles-and-di/#tham-khao","text":"(*) https://github.com/Codeception/AspectMock https://github.com/kahlan/kahlan https://github.com/infection/infection https://www.phpspec.net/en/stable/","title":"Tham kh\u1ea3o"},{"location":"06-mutation-testing/","text":"Mutation Testing \u00b6 TODO https://medium.com/@maks_rafalko/infection-mutation-testing-framework-c9ccf02eefd1 https://github.com/infection/infection","title":"Mutation Testing"},{"location":"06-mutation-testing/#mutation-testing","text":"TODO https://medium.com/@maks_rafalko/infection-mutation-testing-framework-c9ccf02eefd1 https://github.com/infection/infection","title":"Mutation Testing"},{"location":"07-laravel/","text":"Laravel \u00b6 Conventions \u00b6 C\u1ea5u tr\u00fac th\u01b0 m\u1ee5c T\u1ea5t c\u1ea3 Unit Tests \u0111\u01b0\u1ee3c \u0111\u1eb7t trong th\u01b0 m\u1ee5c tests/Unit (xem config testsuite trong phpunit.xml ) T\u1ea5t c\u1ea3 Integration Tests \u0111\u01b0\u1ee3c \u0111\u1eb7t trong th\u01b0 m\u1ee5c tests/Integration N\u1ed9i dung b\u00ean trong th\u01b0 m\u1ee5c Unit c\u00f3 c\u1ea5u tr\u00fac gi\u1ed1ng v\u1edbi c\u1ea5u tr\u00fac b\u00ean trong th\u01b0 m\u1ee5c app . V\u00ed d\u1ee5 nh\u01b0 Unit Test cho file app/Models/User.php t\u01b0\u01a1ng \u1ee9ng l\u00e0 tests/Unit/Models/UserTest.php Quy t\u1eafc \u0111\u1eb7t t\u00ean Th\u01b0\u1eddng c\u00f3 namespace b\u1eaft \u0111\u1ea7u v\u1edbi Tests\\ (xem ph\u1ea7n autoload-dev trong composer.json) Method test ph\u1ea3i \u0111\u01b0\u1ee3c b\u1eaft \u0111\u1ea7u b\u1eb1ng test , vi\u1ebft d\u1ea1ng camelCase hay snake_case \u0111\u1ec1u \u0111\u01b0\u1ee3c, kh\u00f4ng ph\u1ea3i qu\u00e1 lo l\u1eafng v\u1ec1 t\u00ean method test qu\u00e1 d\u00e0i, nh\u01b0ng n\u00ean ch\u1ecdn 1 trong hai cho th\u1ed1ng nh\u1ea5t, prefer snake_case \u0111\u1ec3 cho d\u1ec5 \u0111\u1ecdc h\u01a1n: public function test_it_throws_an_exception_when_email_is_too_long () { } TODO","title":"Laravel"},{"location":"07-laravel/#laravel","text":"","title":"Laravel"},{"location":"07-laravel/#conventions","text":"C\u1ea5u tr\u00fac th\u01b0 m\u1ee5c T\u1ea5t c\u1ea3 Unit Tests \u0111\u01b0\u1ee3c \u0111\u1eb7t trong th\u01b0 m\u1ee5c tests/Unit (xem config testsuite trong phpunit.xml ) T\u1ea5t c\u1ea3 Integration Tests \u0111\u01b0\u1ee3c \u0111\u1eb7t trong th\u01b0 m\u1ee5c tests/Integration N\u1ed9i dung b\u00ean trong th\u01b0 m\u1ee5c Unit c\u00f3 c\u1ea5u tr\u00fac gi\u1ed1ng v\u1edbi c\u1ea5u tr\u00fac b\u00ean trong th\u01b0 m\u1ee5c app . V\u00ed d\u1ee5 nh\u01b0 Unit Test cho file app/Models/User.php t\u01b0\u01a1ng \u1ee9ng l\u00e0 tests/Unit/Models/UserTest.php Quy t\u1eafc \u0111\u1eb7t t\u00ean Th\u01b0\u1eddng c\u00f3 namespace b\u1eaft \u0111\u1ea7u v\u1edbi Tests\\ (xem ph\u1ea7n autoload-dev trong composer.json) Method test ph\u1ea3i \u0111\u01b0\u1ee3c b\u1eaft \u0111\u1ea7u b\u1eb1ng test , vi\u1ebft d\u1ea1ng camelCase hay snake_case \u0111\u1ec1u \u0111\u01b0\u1ee3c, kh\u00f4ng ph\u1ea3i qu\u00e1 lo l\u1eafng v\u1ec1 t\u00ean method test qu\u00e1 d\u00e0i, nh\u01b0ng n\u00ean ch\u1ecdn 1 trong hai cho th\u1ed1ng nh\u1ea5t, prefer snake_case \u0111\u1ec3 cho d\u1ec5 \u0111\u1ecdc h\u01a1n: public function test_it_throws_an_exception_when_email_is_too_long () { } TODO","title":"Conventions"},{"location":"08-checklist/","text":"Checklist \u00b6 [1] Self-describing test method \u00b6 Unit Test method names must be self-describing Also focus on naming style, keep the naming style consistent across all the test methods and tests. M\u1ee5c \u0111\u00edch: Test case l\u00e0 t\u00e0i li\u1ec7u \u0110\u1ecdc v\u00e0o t\u00ean method test c\u00f3 th\u1ec3 bi\u1ebft m\u1ee5c \u0111\u00edch c\u1ee7a test case Th\u1ef1c hi\u1ec7n T\u00ean test method kh\u00f4ng c\u1ea7n ph\u1ea3i qu\u00e1 ng\u1eafn g\u1ecdn T\u00ean test method ph\u1ea3i ch\u1ec9 ra \u0111i\u1ec1u ki\u1ec7n v\u00e0 expect c\u1ee7a test case Th\u1ed1ng nh\u1ea5t convention trong project, m\u1eb7c \u0111\u1ecbnh visibility c\u1ee7a 1 method trong class l\u00e0 public n\u00ean c\u00f3 th\u1ec3 lo\u1ea1i b\u1ecf t\u1eeb public trong method test Ch\u1ecdn m\u1ed9t trong c\u00e1c convention sau: [Recommend] S\u1eed d\u1ee5ng prefix test_ function test_it_returns_false_when_input_number_is_odd () S\u1eed d\u1ee5ng annotation @test th\u00ec t\u00ean test method kh\u00f4ng c\u1ea7n ph\u1ea3i b\u1eaft \u0111\u1ea7u b\u1eb1ng test_ /* @test */ function it_returns_false_when_input_number_is_odd () S\u1eed d\u1ee5ng camelCase thay cho snake_case , ch\u1ec9 n\u00ean s\u1eed d\u1ee5ng n\u1ebfu trong project \u0111\u00e3 vi\u1ebft theo c\u00e1ch n\u00e0y tr\u01b0\u1edbc \u0111\u00f3 function testItReturnsFalseWhenInputNumberIsOdd () [2] A3 (Arrange, Asset, Act) \u00b6 A3 (Arrange, Asset, Act) Arrange: thi\u1ebft l\u1eadp tr\u1ea1ng th\u00e1i, kh\u1edfi t\u1ea1o object, gi\u1ea3 l\u1eadp mock Act: Ch\u1ea1y unit \u0111ang c\u1ea7n test (method under test) Assert: So s\u00e1nh expected v\u1edbi k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 M\u1ee5c \u0111\u00edch: N\u1ed9i dung test method r\u00f5 r\u00e0ng d\u1ec5 \u0111\u1ecdc, d\u1ec5 vi\u1ebft Th\u1ef1c hi\u1ec7n Chia n\u1ed9i dung test l\u00e0m 3 ph\u1ea7n function test_validation_failed_when_value_exceed_max_length () { // Arrange $username = str_pad ( 'a' , UsernameValidation :: MAX_LENGTH + 1 ); // Act $validation = new UsernameValidation ; $isValidUsername = $validation -> isValid ( $username ); // Assert $this -> assertFalse ( $isValidUsername ); } Ngo\u1ea1i l\u1ec7 khi test m\u1ed9t method throw exception, do v\u1ea5n \u0111\u1ec1 k\u1ef9 thu\u1eadt n\u00ean ph\u1ea3i g\u1ecdi expectionException() tr\u01b0\u1edbc khi g\u1ecdi method: function test_it_throws_exception_when_input_is_not_a_number () { // Assert that $this -> expectException ( InvalidArgumentException :: class ); // Arrange $calculator = new Calculator ; $input1 = 'i am a string' ; $input2 = 100 ; // Act $calculator -> add ( $input1 , $input2 ); } [3] Use sematic/proper assert method \u00b6 Keep assert method descriptive. Use proper assert method to improve the readability of code and the error log. S\u1eed d\u1ee5ng assertion ph\u00f9 h\u1ee3p Code d\u1ec5 \u0111\u1ecdc hi\u1ec3u h\u01a1n N\u1ebfu assert failed th\u00ec message sinh ra c\u0169ng d\u1ec5 hi\u1ec3u h\u01a1n Signature c\u1ee7a c\u00e1c method assert th\u01b0\u1eddng c\u00f3 c\u00e1c tham s\u1ed1 theo th\u1ee9 t\u1ef1 l\u00e0 expected value (gi\u00e1 tr\u1ecb mong mu\u1ed1n), actual value (gi\u00e1 tr\u1ecb th\u1ef1c t\u1ebf khi ch\u1ea1y unit), message (message th\u00f4ng b\u00e1o n\u1ebfu fail) n\u00ean c\u1ea7n truy\u1ec1n theo th\u1ee9 t\u1ef1 \u0111\u1ec3 PHPUnit c\u00f3 th\u1ec3 generate ra message b\u00e1o l\u1ed7i ch\u00ednh x\u00e1c $this -> assertEquals ( $expected , $actual ); // => Failed asserting that $actual matches expected $expected. $this -> assertTrue ( $expected == $actual ); // => Failed asserting that false is true?? $this -> assertSame ( $expected , $actual ); $this -> assertTrue ( $expected === $actual ); $this -> assertContains ( $element , $array ); $this -> assertTrue ( in_array ( $element , $array ); $this -> assertCount ( $expected , $actual ); $this -> assertTrue ( count ( $actual ) == $expected ); $this -> assertInstanceOf ( ExpectedClass :: class , $actual ); $this -> assertTrue ( $actual instanceOf ExpectedClass ); [4] If you write code, write tests \u00b6 Th\u1ef1c hi\u1ec7n M\u1ecdi PR \u0111\u1ec1u ph\u1ea3i ch\u00fa \u00fd \u0111\u1ebfn test PR th\u00eam feature => vi\u1ebft test cho feature m\u1edbi PR fix bug => vi\u1ebft test \u0111\u1ec3 tr\u00e1nh bug x\u1ea3y ra 1 l\u1ea7n n\u1eefa PR refactor => ch\u1ea1y, update test \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o kh\u00f4ng ph\u00e1t sinh \u1ea3nh h\u01b0\u1edfng N\u00ean t\u00edch h\u1ee3p CI \u0111\u1ec3 ch\u1ea1y test FAQ : Q: Th\u1eddi \u0111i\u1ec3m t\u1ed1t nh\u1ea5t \u0111\u1ec3 vi\u1ebft test? A: Th\u1eddi \u0111i\u1ec3m t\u1ed1t nh\u1ea5t l\u00e0 khi code c\u00f2n m\u1edbi! Th\u1eddi \u0111i\u1ec3m m\u00e0 c\u1ea3 code v\u00e0 test \u0111\u1ec1u c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng thay \u0111\u1ed5i. T\u01b0\u1edfng t\u01b0\u1ee3ng code gi\u1ed1ng nh\u01b0 \u0111\u1ea5t s\u00e9t , khi c\u00f2n m\u1edbi th\u00ec n\u00f3 m\u1ec1m v\u00e0 d\u1ec5 n\u1eb7n, n\u1ebfu \u0111\u1ec3 l\u00e2u th\u00ec n\u00f3 s\u1ebd c\u1ee9ng v\u00e0 d\u1ec5 v\u1ee1 [5] Unit vs Integration? \u00b6 Rule \u0111\u01a1n gi\u1ea3n Unit test Test t\u1eebng function ho\u1eb7c method c\u1ee7a m\u1ed9t class Kh\u00f4ng th\u1ef1c hi\u1ec7n nh\u1eefng vi\u1ec7c sau: Truy v\u1ea5n c\u01a1 s\u1edf d\u1eef li\u1ec7u (l\u00e0m ch\u1eadm qu\u00e1 tr\u00ecnh test) S\u1eed d\u1ee5ng network (g\u1eedi mail, g\u1ecdi api b\u00ean ngo\u00e0i,...) (l\u00e0m ch\u1eadm, k\u1ebft qu\u1ea3 kh\u00f4ng \u1ed5n \u0111\u1ecbnh v\u00ec ph\u1ee5 thu\u1ed9c v\u00e0o m\u1ea1ng) S\u1eed d\u1ee5ng file system (l\u00e0m ch\u1eadm qu\u00e1 tr\u00ecnh test) Integration test Test vi\u1ec7c k\u1ebft h\u1ee3p gi\u1eefa c\u00e1c unit (function, method) v\u1edbi nhau => test m\u1ed9t nh\u00f3m Unit (v\u00ed d\u1ee5 test route) C\u00f3 th\u1ec3 truy v\u1ea5n c\u01a1 s\u1edf d\u1eef li\u1ec7u (thi\u1ebft l\u1eadp m\u1ed9t database test ri\u00eang bi\u1ec7t) C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng file system (test vi\u1ec7c import/export file, file permission...) L\u1eddi khuy\u00ean V\u1edbi ng\u01b0\u1eddi m\u1edbi b\u1eaft \u0111\u1ea7u, b\u1ea1n c\u00f3 th\u1ec3 b\u1eaft \u0111\u1ea7u \u0111i t\u1eeb integration test b\u1eb1ng vi\u1ec7c test t\u1eebng route. Trong qu\u00e1 tr\u00ecnh vi\u1ebft integration test c\u1ed1 g\u1eafng split ra unit test nh\u1ecf h\u01a1n n\u1ebfu \u0111\u01b0\u1ee3c. Qu\u00e1 nhi\u1ec1u integration test s\u1ebd khi\u1ebfn th\u1eddi gian ch\u1ea1y test l\u00e2u h\u01a1n, vi\u1ec7c truy v\u1ebft l\u1ed7i c\u0169ng kh\u00f3 kh\u0103n h\u01a1n do 1 feature ch\u1ea1y qua nhi\u1ec1u l\u1edbp, layer code. [6] My tests are fast! \u00b6 Th\u1ef1c hi\u1ec7n Ngo\u00e0i vi\u1ec7c ch\u00fa tr\u1ecdng v\u00e0o vi\u1ec7c vi\u1ebft test case \u0111\u00fang, c\u1ea7n ch\u00fa \u00fd \u0111\u1ebfn th\u1eddi gian ch\u1ea1y test H\u1ea1n ch\u1ebf test database (integration), v\u00e0 n\u1ebfu c\u00f3 th\u1ec3 th\u00ec d\u00f9ng sqlite in-memory l\u00e0m database test Test kh\u00f4ng g\u1ecdi network hay api service ngo\u00e0i Khi test l\u00e0m vi\u1ec7c v\u1edbi file, c\u00e2n nh\u1eafc s\u1eed d\u1ee5ng vfsStream Khi ch\u1ea1y phpunit \u0111\u1ec3 generate code coverage c\u00e2n nh\u1eafc l\u1ef1a ch\u1ecdn driver th\u00edch h\u1ee3p, xem th\u00eam Code Coverage T\u1ea1i sao? B\u1ea1n s\u1ebd ph\u1ea3i ch\u1ea1y tests th\u01b0\u1eddng xuy\u00ean, l\u1eb7p l\u1ea1i => N\u1ebfu tests ch\u1ea1y qu\u00e1 ch\u1eadm s\u1ebd l\u00e0m \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn ti\u1ebfn \u0111\u1ed9, tinh th\u1ea7n l\u00e0m vi\u1ec7c D\u1ef1 \u00e1n \u00e1p d\u1ee5ng CI \u0111\u1ec3 build, test v\u00e0 deploy => N\u1ebfu tests ch\u1ea1y qu\u00e1 ch\u1eadm s\u1ebd d\u1eabn \u0111\u1ebfn vi\u1ec7c t\u00edch h\u1ee3p cho c\u1ea3 team b\u1ecb ch\u1eadm [7] Quality over code coverage number! \u00b6 S\u1ef1 th\u1eadt v\u1ec1 code coverage Kh\u00f4ng c\u1ea7n vi\u1ebft test \u0111\u00fang v\u1eabn c\u00f3 th\u1ec3 \u0111\u1ea1t 100% coverage! C\u00f3 tr\u01b0\u1eddng h\u1ee3p \u0111\u00e3 \u0111\u1ea1t 100% coverage r\u1ed3i nh\u01b0ng v\u1eabn c\u00f3 kh\u1ea3 n\u0103ng l\u1ecdt bug v\u00ec thi\u1ebfu test case => Tham kh\u1ea3o th\u00eam c\u00e1ch phpunit t\u00ednh coverage => link Th\u1ef1c hi\u1ec7n Ch\u00fa tr\u1ecdng v\u00e0o ch\u1ea5t l\u01b0\u1ee3ng test case, vi\u1ebft sao cho \u0111\u1ee7 test case? l\u00e0m sao \u0111\u1ec3 test ch\u1ea1y nhanh h\u01a1n? l\u00e0m sao \u0111\u1ec3 vi\u1ebft test d\u1ec5 h\u01a1n, refactor code? \u00c1p d\u1ee5ng mutation testing v\u00e0o d\u1ef1 \u00e1n n\u1ebfu c\u00f3 th\u1ec3, \u0111\u1ec3 c\u00f3 ch\u1ec9 s\u1ed1 \u0111\u00e1nh g\u00eda t\u1ed1t h\u01a1n => Mutation Testing Pull request template \u00b6 Tham kh\u1ea3o https://github.com/sun7pro/.github/blob/master/PULL_REQUEST_TEMPLATE.md \u0111\u1ec3 \u00e1p d\u1ee5ng pull request template cho d\u1ef1 \u00e1n.","title":"Checklist"},{"location":"08-checklist/#checklist","text":"","title":"Checklist"},{"location":"08-checklist/#1-self-describing-test-method","text":"Unit Test method names must be self-describing Also focus on naming style, keep the naming style consistent across all the test methods and tests. M\u1ee5c \u0111\u00edch: Test case l\u00e0 t\u00e0i li\u1ec7u \u0110\u1ecdc v\u00e0o t\u00ean method test c\u00f3 th\u1ec3 bi\u1ebft m\u1ee5c \u0111\u00edch c\u1ee7a test case Th\u1ef1c hi\u1ec7n T\u00ean test method kh\u00f4ng c\u1ea7n ph\u1ea3i qu\u00e1 ng\u1eafn g\u1ecdn T\u00ean test method ph\u1ea3i ch\u1ec9 ra \u0111i\u1ec1u ki\u1ec7n v\u00e0 expect c\u1ee7a test case Th\u1ed1ng nh\u1ea5t convention trong project, m\u1eb7c \u0111\u1ecbnh visibility c\u1ee7a 1 method trong class l\u00e0 public n\u00ean c\u00f3 th\u1ec3 lo\u1ea1i b\u1ecf t\u1eeb public trong method test Ch\u1ecdn m\u1ed9t trong c\u00e1c convention sau: [Recommend] S\u1eed d\u1ee5ng prefix test_ function test_it_returns_false_when_input_number_is_odd () S\u1eed d\u1ee5ng annotation @test th\u00ec t\u00ean test method kh\u00f4ng c\u1ea7n ph\u1ea3i b\u1eaft \u0111\u1ea7u b\u1eb1ng test_ /* @test */ function it_returns_false_when_input_number_is_odd () S\u1eed d\u1ee5ng camelCase thay cho snake_case , ch\u1ec9 n\u00ean s\u1eed d\u1ee5ng n\u1ebfu trong project \u0111\u00e3 vi\u1ebft theo c\u00e1ch n\u00e0y tr\u01b0\u1edbc \u0111\u00f3 function testItReturnsFalseWhenInputNumberIsOdd ()","title":"[1] Self-describing test method"},{"location":"08-checklist/#2-a3-arrange-asset-act","text":"A3 (Arrange, Asset, Act) Arrange: thi\u1ebft l\u1eadp tr\u1ea1ng th\u00e1i, kh\u1edfi t\u1ea1o object, gi\u1ea3 l\u1eadp mock Act: Ch\u1ea1y unit \u0111ang c\u1ea7n test (method under test) Assert: So s\u00e1nh expected v\u1edbi k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 M\u1ee5c \u0111\u00edch: N\u1ed9i dung test method r\u00f5 r\u00e0ng d\u1ec5 \u0111\u1ecdc, d\u1ec5 vi\u1ebft Th\u1ef1c hi\u1ec7n Chia n\u1ed9i dung test l\u00e0m 3 ph\u1ea7n function test_validation_failed_when_value_exceed_max_length () { // Arrange $username = str_pad ( 'a' , UsernameValidation :: MAX_LENGTH + 1 ); // Act $validation = new UsernameValidation ; $isValidUsername = $validation -> isValid ( $username ); // Assert $this -> assertFalse ( $isValidUsername ); } Ngo\u1ea1i l\u1ec7 khi test m\u1ed9t method throw exception, do v\u1ea5n \u0111\u1ec1 k\u1ef9 thu\u1eadt n\u00ean ph\u1ea3i g\u1ecdi expectionException() tr\u01b0\u1edbc khi g\u1ecdi method: function test_it_throws_exception_when_input_is_not_a_number () { // Assert that $this -> expectException ( InvalidArgumentException :: class ); // Arrange $calculator = new Calculator ; $input1 = 'i am a string' ; $input2 = 100 ; // Act $calculator -> add ( $input1 , $input2 ); }","title":"[2] A3 (Arrange, Asset, Act)"},{"location":"08-checklist/#3-use-sematicproper-assert-method","text":"Keep assert method descriptive. Use proper assert method to improve the readability of code and the error log. S\u1eed d\u1ee5ng assertion ph\u00f9 h\u1ee3p Code d\u1ec5 \u0111\u1ecdc hi\u1ec3u h\u01a1n N\u1ebfu assert failed th\u00ec message sinh ra c\u0169ng d\u1ec5 hi\u1ec3u h\u01a1n Signature c\u1ee7a c\u00e1c method assert th\u01b0\u1eddng c\u00f3 c\u00e1c tham s\u1ed1 theo th\u1ee9 t\u1ef1 l\u00e0 expected value (gi\u00e1 tr\u1ecb mong mu\u1ed1n), actual value (gi\u00e1 tr\u1ecb th\u1ef1c t\u1ebf khi ch\u1ea1y unit), message (message th\u00f4ng b\u00e1o n\u1ebfu fail) n\u00ean c\u1ea7n truy\u1ec1n theo th\u1ee9 t\u1ef1 \u0111\u1ec3 PHPUnit c\u00f3 th\u1ec3 generate ra message b\u00e1o l\u1ed7i ch\u00ednh x\u00e1c $this -> assertEquals ( $expected , $actual ); // => Failed asserting that $actual matches expected $expected. $this -> assertTrue ( $expected == $actual ); // => Failed asserting that false is true?? $this -> assertSame ( $expected , $actual ); $this -> assertTrue ( $expected === $actual ); $this -> assertContains ( $element , $array ); $this -> assertTrue ( in_array ( $element , $array ); $this -> assertCount ( $expected , $actual ); $this -> assertTrue ( count ( $actual ) == $expected ); $this -> assertInstanceOf ( ExpectedClass :: class , $actual ); $this -> assertTrue ( $actual instanceOf ExpectedClass );","title":"[3] Use sematic/proper assert method"},{"location":"08-checklist/#4-if-you-write-code-write-tests","text":"Th\u1ef1c hi\u1ec7n M\u1ecdi PR \u0111\u1ec1u ph\u1ea3i ch\u00fa \u00fd \u0111\u1ebfn test PR th\u00eam feature => vi\u1ebft test cho feature m\u1edbi PR fix bug => vi\u1ebft test \u0111\u1ec3 tr\u00e1nh bug x\u1ea3y ra 1 l\u1ea7n n\u1eefa PR refactor => ch\u1ea1y, update test \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o kh\u00f4ng ph\u00e1t sinh \u1ea3nh h\u01b0\u1edfng N\u00ean t\u00edch h\u1ee3p CI \u0111\u1ec3 ch\u1ea1y test FAQ : Q: Th\u1eddi \u0111i\u1ec3m t\u1ed1t nh\u1ea5t \u0111\u1ec3 vi\u1ebft test? A: Th\u1eddi \u0111i\u1ec3m t\u1ed1t nh\u1ea5t l\u00e0 khi code c\u00f2n m\u1edbi! Th\u1eddi \u0111i\u1ec3m m\u00e0 c\u1ea3 code v\u00e0 test \u0111\u1ec1u c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng thay \u0111\u1ed5i. T\u01b0\u1edfng t\u01b0\u1ee3ng code gi\u1ed1ng nh\u01b0 \u0111\u1ea5t s\u00e9t , khi c\u00f2n m\u1edbi th\u00ec n\u00f3 m\u1ec1m v\u00e0 d\u1ec5 n\u1eb7n, n\u1ebfu \u0111\u1ec3 l\u00e2u th\u00ec n\u00f3 s\u1ebd c\u1ee9ng v\u00e0 d\u1ec5 v\u1ee1","title":"[4] If you write code, write tests"},{"location":"08-checklist/#5-unit-vs-integration","text":"Rule \u0111\u01a1n gi\u1ea3n Unit test Test t\u1eebng function ho\u1eb7c method c\u1ee7a m\u1ed9t class Kh\u00f4ng th\u1ef1c hi\u1ec7n nh\u1eefng vi\u1ec7c sau: Truy v\u1ea5n c\u01a1 s\u1edf d\u1eef li\u1ec7u (l\u00e0m ch\u1eadm qu\u00e1 tr\u00ecnh test) S\u1eed d\u1ee5ng network (g\u1eedi mail, g\u1ecdi api b\u00ean ngo\u00e0i,...) (l\u00e0m ch\u1eadm, k\u1ebft qu\u1ea3 kh\u00f4ng \u1ed5n \u0111\u1ecbnh v\u00ec ph\u1ee5 thu\u1ed9c v\u00e0o m\u1ea1ng) S\u1eed d\u1ee5ng file system (l\u00e0m ch\u1eadm qu\u00e1 tr\u00ecnh test) Integration test Test vi\u1ec7c k\u1ebft h\u1ee3p gi\u1eefa c\u00e1c unit (function, method) v\u1edbi nhau => test m\u1ed9t nh\u00f3m Unit (v\u00ed d\u1ee5 test route) C\u00f3 th\u1ec3 truy v\u1ea5n c\u01a1 s\u1edf d\u1eef li\u1ec7u (thi\u1ebft l\u1eadp m\u1ed9t database test ri\u00eang bi\u1ec7t) C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng file system (test vi\u1ec7c import/export file, file permission...) L\u1eddi khuy\u00ean V\u1edbi ng\u01b0\u1eddi m\u1edbi b\u1eaft \u0111\u1ea7u, b\u1ea1n c\u00f3 th\u1ec3 b\u1eaft \u0111\u1ea7u \u0111i t\u1eeb integration test b\u1eb1ng vi\u1ec7c test t\u1eebng route. Trong qu\u00e1 tr\u00ecnh vi\u1ebft integration test c\u1ed1 g\u1eafng split ra unit test nh\u1ecf h\u01a1n n\u1ebfu \u0111\u01b0\u1ee3c. Qu\u00e1 nhi\u1ec1u integration test s\u1ebd khi\u1ebfn th\u1eddi gian ch\u1ea1y test l\u00e2u h\u01a1n, vi\u1ec7c truy v\u1ebft l\u1ed7i c\u0169ng kh\u00f3 kh\u0103n h\u01a1n do 1 feature ch\u1ea1y qua nhi\u1ec1u l\u1edbp, layer code.","title":"[5] Unit vs Integration?"},{"location":"08-checklist/#6-my-tests-are-fast","text":"Th\u1ef1c hi\u1ec7n Ngo\u00e0i vi\u1ec7c ch\u00fa tr\u1ecdng v\u00e0o vi\u1ec7c vi\u1ebft test case \u0111\u00fang, c\u1ea7n ch\u00fa \u00fd \u0111\u1ebfn th\u1eddi gian ch\u1ea1y test H\u1ea1n ch\u1ebf test database (integration), v\u00e0 n\u1ebfu c\u00f3 th\u1ec3 th\u00ec d\u00f9ng sqlite in-memory l\u00e0m database test Test kh\u00f4ng g\u1ecdi network hay api service ngo\u00e0i Khi test l\u00e0m vi\u1ec7c v\u1edbi file, c\u00e2n nh\u1eafc s\u1eed d\u1ee5ng vfsStream Khi ch\u1ea1y phpunit \u0111\u1ec3 generate code coverage c\u00e2n nh\u1eafc l\u1ef1a ch\u1ecdn driver th\u00edch h\u1ee3p, xem th\u00eam Code Coverage T\u1ea1i sao? B\u1ea1n s\u1ebd ph\u1ea3i ch\u1ea1y tests th\u01b0\u1eddng xuy\u00ean, l\u1eb7p l\u1ea1i => N\u1ebfu tests ch\u1ea1y qu\u00e1 ch\u1eadm s\u1ebd l\u00e0m \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn ti\u1ebfn \u0111\u1ed9, tinh th\u1ea7n l\u00e0m vi\u1ec7c D\u1ef1 \u00e1n \u00e1p d\u1ee5ng CI \u0111\u1ec3 build, test v\u00e0 deploy => N\u1ebfu tests ch\u1ea1y qu\u00e1 ch\u1eadm s\u1ebd d\u1eabn \u0111\u1ebfn vi\u1ec7c t\u00edch h\u1ee3p cho c\u1ea3 team b\u1ecb ch\u1eadm","title":"[6] My tests are fast!"},{"location":"08-checklist/#7-quality-over-code-coverage-number","text":"S\u1ef1 th\u1eadt v\u1ec1 code coverage Kh\u00f4ng c\u1ea7n vi\u1ebft test \u0111\u00fang v\u1eabn c\u00f3 th\u1ec3 \u0111\u1ea1t 100% coverage! C\u00f3 tr\u01b0\u1eddng h\u1ee3p \u0111\u00e3 \u0111\u1ea1t 100% coverage r\u1ed3i nh\u01b0ng v\u1eabn c\u00f3 kh\u1ea3 n\u0103ng l\u1ecdt bug v\u00ec thi\u1ebfu test case => Tham kh\u1ea3o th\u00eam c\u00e1ch phpunit t\u00ednh coverage => link Th\u1ef1c hi\u1ec7n Ch\u00fa tr\u1ecdng v\u00e0o ch\u1ea5t l\u01b0\u1ee3ng test case, vi\u1ebft sao cho \u0111\u1ee7 test case? l\u00e0m sao \u0111\u1ec3 test ch\u1ea1y nhanh h\u01a1n? l\u00e0m sao \u0111\u1ec3 vi\u1ebft test d\u1ec5 h\u01a1n, refactor code? \u00c1p d\u1ee5ng mutation testing v\u00e0o d\u1ef1 \u00e1n n\u1ebfu c\u00f3 th\u1ec3, \u0111\u1ec3 c\u00f3 ch\u1ec9 s\u1ed1 \u0111\u00e1nh g\u00eda t\u1ed1t h\u01a1n => Mutation Testing","title":"[7] Quality over code coverage number!"},{"location":"08-checklist/#pull-request-template","text":"Tham kh\u1ea3o https://github.com/sun7pro/.github/blob/master/PULL_REQUEST_TEMPLATE.md \u0111\u1ec3 \u00e1p d\u1ee5ng pull request template cho d\u1ef1 \u00e1n.","title":"Pull request template"},{"location":"09-tdd/","text":"TDD \u00b6 TODO","title":"TDD"},{"location":"09-tdd/#tdd","text":"TODO","title":"TDD"},{"location":"10-references/","text":"T\u00e0i li\u1ec7u kh\u00e1c \u00b6 Framgia's Laravel Testing Guidelines JeffreyWay - Laravel Testing Decoded Martin Fowler - Unit Test Viblo's Automation Testing ASP.NET Core 2.0 Viblo's T\u1ea3n m\u1ea1n v\u1ec1 Testing Ham Vocke - The Practical Test Pyramid Viblo's PHP Unit Testing With PHPUnit PHPUnit Manual Laravel Testing Official Documents Laravel Testing Decoded Laracast's Testing Jargon Laracast's Testing Laravel Laracast's Intuitive Integration Testing https://blog.jgrossi.com/2018/solitary-or-sociable-testing-events-and-listeners-using-laravel/ https://symfonycasts.com/screencast/phpunit/ Rails Testing Guides Martin Fowler - UnitTest M\u1ed9t s\u1ed1 k\u1ef9 thu\u1eadt kh\u00e1c \u00b6 Codeception Kahlan - The PHP Test Framework for Freedom, Truth, and Justice Infection - Mutation Testing framework PHPSPEC","title":"T\u00e0i li\u1ec7u kh\u00e1c"},{"location":"10-references/#tai-lieu-khac","text":"Framgia's Laravel Testing Guidelines JeffreyWay - Laravel Testing Decoded Martin Fowler - Unit Test Viblo's Automation Testing ASP.NET Core 2.0 Viblo's T\u1ea3n m\u1ea1n v\u1ec1 Testing Ham Vocke - The Practical Test Pyramid Viblo's PHP Unit Testing With PHPUnit PHPUnit Manual Laravel Testing Official Documents Laravel Testing Decoded Laracast's Testing Jargon Laracast's Testing Laravel Laracast's Intuitive Integration Testing https://blog.jgrossi.com/2018/solitary-or-sociable-testing-events-and-listeners-using-laravel/ https://symfonycasts.com/screencast/phpunit/ Rails Testing Guides Martin Fowler - UnitTest","title":"T\u00e0i li\u1ec7u kh\u00e1c"},{"location":"10-references/#mot-so-ky-thuat-khac","text":"Codeception Kahlan - The PHP Test Framework for Freedom, Truth, and Justice Infection - Mutation Testing framework PHPSPEC","title":"M\u1ed9t s\u1ed1 k\u1ef9 thu\u1eadt kh\u00e1c"}]}